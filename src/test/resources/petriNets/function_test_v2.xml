<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../main/resources/petriNets/petriflow_schema.xsd">
    <id>function_test</id>
    <version>1.0.0</version>
    <title>Test</title>
    <defaultRole>false</defaultRole>
    <anonymousRole>false</anonymousRole>
    <properties>
        <property key="initials">SFT</property>
    </properties>
    <role>
        <id>admin</id>
        <title>Admin</title>
    </role>
    <role>
        <id>user</id>
        <title>User</title>
    </role>
    <function scope="process" name="behaveField">
        <![CDATA[
		{ def fieldId, def transitionId, def behavior ->
		    make useCase.getField(fieldId), behavior on useCase.petriNet.transitions[transitionId] when { true }
		}
		]]>
    </function>
    <function scope="process" name="evaluateCompactedCondition">
        <![CDATA[
		{ def compactedCondition ->
		    for (def disjunction = compactedCondition.iterator(); disjunction.hasNext();) {
		        if (!evaluateCompactedDisjunction(disjunction.next()))
		            return false
		    }
		    return true
		}
		]]>
    </function>
    <function scope="process" name="evaluateCompactedDisjunction">
        <![CDATA[
		{ def compactedDisjunction ->
		    String fieldId = compactedDisjunction.get(0)
		    String fieldType = compactedDisjunction.get(1)
		    if (compactedDisjunction.size() == 2) {
		        // empty condition
		        return ((useCase.dataSet[fieldId].value as String)?.isEmpty() as boolean || useCase.dataSet[fieldId]?.value == null) as boolean
		    } else {
		        if (fieldType == "E" || fieldType == "B")
		            return compactedDisjunction[2..compactedDisjunction.size() - 1].contains(useCase.dataSet[fieldId].value as String) as boolean
		        else if (fieldType == "M") {
		            return ![0, null].contains((useCase.dataSet[fieldId].value as Set)?.stream()?.map { str -> str as String }?.collect(Collectors.toSet())?.intersect(compactedDisjunction[2..compactedDisjunction.size() - 1])?.size()) as boolean
		        } else if (fieldType == "BTN") {
		            if (useCase.dataSet[fieldId].value == null) return false
		            return compactedDisjunction[2..compactedDisjunction.size() - 1].contains((useCase.dataSet[fieldId]?.value as int) % 2 as String) as Boolean
		        } else return false
		    }
		}
		]]>
    </function>
    <function scope="process" name="showFields">
        <![CDATA[
		{ def fields, def transitionIds, def condition, behavior = editable, behavior2 = required ->
		    if (evaluateCompactedCondition(condition)) {
		        transitionIds.each { transitionId ->
		            fields.each {
		                behaveField(it as String, transitionId, behavior as Closure)
		                behaveField(it as String, transitionId, behavior2 as Closure)
		            }
		        }
		    } else {
		        transitionIds.each { transitionId ->
		            fields.each {
		                behaveField(it as String, transitionId, hidden as Closure)
		                behaveField(it as String, transitionId, optional as Closure)
		            }
		        }
		    }
		}
		]]>
    </function>
    <data type="boolean">
        <id>createUser</id>
        <title>Boolean</title>
        <init>false</init>
        <event type="set">
            <actions phase="post">
                <action id="action_9">
                    <![CDATA[
                    def user = new com.netgrif.application.engine.authentication.domain.User("test@test.com", "password", "test", "test")
                    user.state = com.netgrif.application.engine.authentication.domain.IdentityState.ACTIVE
                    function_res.createUser(user)
                    ]]>
                </action>
            </actions>
        </event>
    </data>
    <data type="enumeration">
        <id>enum</id>
        <title>Enum</title>
        <options>
            <option key="ano">ano</option>
            <option key="nie">nie</option>
        </options>
        <event type="set">
            <actions phase="post">
                <action id="action_8">
					<![CDATA[
                    showFields(["number"], ["0"], [["enum", "E", "ano"]])
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="number">
        <id>number</id>
        <title>Number</title>
    </data>
    <data type="number">
        <id>number2</id>
        <title>Number</title>
    </data>
    <data type="text">
        <id>text</id>
        <title>Text</title>
        <event type="set">
            <actions phase="post">
                <action id="action_7">
					<![CDATA[
                    function_test.foo(text.value)
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="number">
        <id>toBeUpdated</id>
        <title>Number</title>
    </data>
    <data type="number">
        <id>toBeUpdatedInternally</id>
        <title>Number</title>
    </data>
    <data type="boolean">
        <id>updateOtherField</id>
        <title>Boolean</title>
        <init>false</init>
        <event type="set">
            <actions phase="post">
                <action id="action_10">
					<![CDATA[
                    function_res.updateUseCaseFieldValue("toBeUpdated", 1)
                    change toBeUpdatedInternally value { (useCase.dataSet.get("toBeUpdated").rawValue as Double) + 1.0 }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <transition>
        <id>0</id>
        <x>0</x>
        <y>0</y>
        <title>Test</title>
        <flex>
            <id>0_flex</id>
            <item>
                <dataRef>
                    <id>number</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>enum</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
</process>