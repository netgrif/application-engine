<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../main/resources/petriNets/petriflow_schema.xsd">
	<id>filter_api_test</id>
	<version>1.0.0</version>
	<title>filter_api_test</title>
	<icon>device_hub</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>true</anonymousRole>
	<properties>
		<property key="initials">FTT</property>
	</properties>
	<processEvents>
		<event type="upload">
			<id>upload</id>
			<actions phase="post">
				<action id="action_0">
					<![CDATA[
					createCase("filter_api_test")
					]]>
				</action>
			</actions>
		</event>
	</processEvents>
	<caseEvents/>
	<role>
		<id>role_1</id>
		<title>Role 1</title>
	</role>
	<role>
		<id>role_2</id>
		<title>Role 2</title>
	</role>
	<data type="text">
		<id>allowed_nets</id>
		<title/>
	</data>
	<data type="button">
		<id>change_filter_and_menu</id>
		<title>change filter and menu</title>
		<event type="set">
			<id>set_event_1</id>
			<actions phase="post">
				<action id="action_2">
					<![CDATA[
					def item = findMenuItem(identifier.value.value)
					def filter = getFilterFromMenuItem(item)
					changeFilter filter query { query.value.value }
					changeFilter filter allowedNets { allowed_nets.value.value.split(",") as List }
					changeFilter filter icon { icon.value.value }
					changeFilter filter title { title.value.value }
					changeFilter filter filterMetadata { [
							"searchCategories"       : [],
							"predicateMetadata"      : [],
							"filterType"             : type,
							"defaultSearchCategories": false,
							"inheritAllowedNets"     : false
					] }
					changeMenuItem item filter { filter }
					changeMenuItem item allowedRoles { ["role_2"] }
					changeMenuItem item uri { uri.value.value }
					// TODO: release/8.0.0
					/*changeMenuItem item filter { filter }
					changeMenuItem item allowedRoles { ["role_2": "filter_api_test"] }
					changeMenuItem item uri { uri.value }
					changeMenuItem item title { title.value }
					changeMenuItem item caseDefaultHeaders { "meta-title,meta-title,meta-title" }
					changeMenuItem item taskDefaultHeaders { "meta-title,meta-title,meta-title" }*/
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>create_filter_and_menu</id>
		<title>create filter and menu</title>
		<event type="set">
			<id>set_event_0</id>
			<actions phase="post">
				<action id="action_1">
					<![CDATA[
					def filter = createCaseFilter(title.rawValue, query.rawValue, allowed_nets.rawValue.split(",") as List, icon.rawValue)
					def body = new com.netgrif.application.engine.workflow.domain.menu.MenuItemBody(uri.rawValue,
							identifier.rawValue, identifier.rawValue, icon.value.value)
					body.setFilter(filter)

					def item = createMenuItem(body)

					change menu_stringId value { item.stringId }
					change filter_stringId value { filter.stringId }
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>create_filter_in_group</id>
		<title>create filter in group</title>
		<event type="set">
			<id>set_event_3</id>
			<actions phase="post">
				<action id="action_4">
					<![CDATA[
					def filter = createFilter(title.rawValue, query.rawValue, type.value.value, allowed_nets.rawValue.split(",") as List,
							icon.rawValue, "private", null)
					def body = new com.netgrif.application.engine.workflow.domain.menu.MenuItemBody(uri.rawValue,
							identifier.rawValue, title.value.value, icon.value.value)
					body.setFilter(filter)
					body.setAllowedRoles(collectRolesForPreferenceItem(["role_1"]))

					def item = createMenuItem(body)

					change menu_stringId value { item.stringId }
					change filter_stringId value { filter.stringId }
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>delete_filter_and_menu</id>
		<title>delete filter and menu</title>
		<event type="set">
			<id>set_event_2</id>
			<actions phase="post">
				<action id="action_3">
					<![CDATA[
					def item = workflowService.findOne(menu_stringId.value.value)
					def filter = getFilterFromMenuItem(item)
					deleteMenuItem(item)
					deleteFilter(filter)
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>filter_stringId</id>
		<title/>
	</data>
	<data type="button">
		<id>find_filter</id>
		<title>find filter</title>
		<event type="set">
			<id>set_event_4</id>
			<actions phase="post">
				<action id="action_5">
					<![CDATA[
					def filter = findFilter(title.value.value)
					change found_filter value { filter.stringId }
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>found_filter</id>
		<title>found filter</title>
	</data>
	<data type="text">
		<id>group</id>
		<title>Skupina</title>
	</data>
	<data type="text">
		<id>icon</id>
		<title/>
		<init>device_hub</init>
	</data>
	<data type="text">
		<id>identifier</id>
		<title/>
	</data>
	<data type="text">
		<id>menu_stringId</id>
		<title/>
	</data>
	<data type="text">
		<id>move_dest_uri</id>
		<title>found filter</title>
	</data>
	<data type="text">
		<id>move_folder_path</id>
		<title>Folder item path to find</title>
	</data>
	<data type="button">
		<id>move_item</id>
		<title>move item</title>
		<event type="set">
			<id>set_event_5</id>
			<actions phase="post">
				<action id="action_6">
					<![CDATA[
					def item
					if (move_item_id.value) {
						item = workflowService.findOne(move_item_id.value)
					} else if (move_folder_path.value) {
						def node = uriService.findByUri(move_folder_path.value)
						item = findFolderCase(node)
					}
					moveMenuItem(item, move_dest_uri.value)
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>move_item_id</id>
		<title>View item id to find</title>
	</data>
	<data type="text">
		<id>query</id>
		<title/>
		<init>processIdentifier:"filter_api_test"</init>
	</data>
	<data type="text">
		<id>title</id>
		<title/>
	</data>
	<data type="text">
		<id>uri</id>
		<title/>
	</data>
	<transition>
		<id>t1</id>
		<x>700</x>
		<y>180</y>
		<title>TEST API</title>
	</transition>
</process>