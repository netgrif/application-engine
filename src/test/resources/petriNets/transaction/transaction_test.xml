<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>transaction_test</id>
	<version>1.0.0</version>
	<initials>TRN</initials>
	<title>transaction_test</title>
	<icon>device_hub</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>true</anonymousRole>
	<transitionRole>false</transitionRole>

	<data type="text">
		<id>text_without_action</id>
		<title/>
	</data>
	<data type="text">
		<id>text_2</id>
		<title/>
	</data>

	<data type="button">
		<id>testBasicTransaction</id>
		<title/>
		<event type="set">
			<id>testBasicTransaction</id>
			<actions phase="post">
				<action>
					text_without_action: f.text_without_action;

					transaction(
						timeout: 1000,
						forceCreation: false,
						event: {
							createCase("transaction_test", "onButton")
							change text_without_action value { "xxx" }
						},
						onCommit: { createCase("transaction_test", "onCommit") },
						onRollBack: { createCase("transaction_test", "onRollBack") }
					)
					createCase("transaction_test", "onAlways")
				</action>
			</actions>
		</event>
	</data>

	<data type="button">
		<id>testBasicTransactionWithFailure</id>
		<title/>
		<event type="set">
			<id>testBasicTransactionWithFailure</id>
			<actions phase="post">
				<action>
					text_without_action: f.text_without_action;

					transaction(
						timeout: 1000,
						forceCreation: false,
						event: {
							createCase("transaction_test", "onButton")
							change text_without_action value { "xxx" }
							// not runtime exception on purpose
							throw new IllegalAccessException("error")
						},
						onCommit: { createCase("transaction_test", "onCommit") },
						onRollBack: { createCase("transaction_test", "onRollBack") }
					)
					createCase("transaction_test", "onAlways")
				</action>
			</actions>
		</event>
	</data>

	<data type="button">
		<id>testFailureInCallBackThrowsError</id>
		<title/>
		<event type="set">
			<id>testFailureInCallBackThrowsError</id>
			<actions phase="post">
				<action>
					text_without_action: f.text_without_action;

					transaction(
						timeout: 1000,
						forceCreation: false,
						event: {
							createCase("transaction_test", "onButton")
							change text_without_action value { "xxx" }
							throw new RuntimeException("error")
						},
						onCommit: { createCase("transaction_test", "onCommit") },
						onRollBack: {
							throw new RuntimeException("error")
							createCase("transaction_test", "onRollBack")
						}
					)
					createCase("transaction_test", "onAlways")
				</action>
			</actions>
		</event>
	</data>

	<data type="button">
		<id>testTimeout</id>
		<title/>
		<event type="set">
			<id>testTimeout</id>
			<actions phase="post">
				<action>
					text_without_action: f.text_without_action;

					transaction(
						timeout: 1,
						forceCreation: false,
						event: {
							createCase("transaction_test", "onButton")
							println "before sleep ${new Date().toString()}"
							Thread.sleep(10000)
							println "after sleep ${new Date().toString()}"
						},
						onCommit: { createCase("transaction_test", "onCommit") },
						onRollBack: { createCase("transaction_test", "onRollBack") }
					)
					createCase("transaction_test", "onAlways")
				</action>
			</actions>
		</event>
	</data>

	<transition>
		<id>t2</id>
		<x>496</x>
		<y>144</y>
		<label>t2</label>
	</transition>
</document>