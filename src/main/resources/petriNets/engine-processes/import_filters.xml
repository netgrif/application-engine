<?xml version="1.0" encoding="UTF-8"?>
<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
    <id>import_filters</id>
    <version>1.0.0</version>
    <title id="import_filters">Import of filters</title>
    <icon>file_upload</icon>
    <defaultRole>true</defaultRole>
    <caseName id="import_filters">Import of filters</caseName>
    <!-- CASE EVENTS -->
    <!-- TRANSACTIONS -->
    <!-- ROLES -->
    <!-- PROCESS ROLE REFS -->
    <!-- PROCESS USER REFS -->
    <!-- DATA -->
    <data type="file">
        <id>upload_file</id>
        <title id="upload_file">Upload filter file</title>
        <placeholder id="upload_file_placeholder">Insert file containing filters</placeholder>
        <desc id="upload_file_desc">Insert xml file that contains filters</desc>
        <action trigger="set">
            importedFilters: f.imported_filters;

            taskService.findAllById(importedFilters.value).forEach({filterTask ->
                workflowService.deleteCase(filterTask.caseId)
            })
            change importedFilters value { return [] }
        </action>
    </data>
    <data type="button">
        <id>import_file</id>
        <title></title>
        <placeholder id="import_file_placeholder">Import filters</placeholder>
        <desc id="import_file_desc">Import filters from uploaded xml file</desc>
        <component>
            <id>raised</id>
        </component>
    </data>
    <data type="taskRef">
        <id>imported_filters</id>
        <title/>
        <action trigger="get">
            importedFilters: f.imported_filters;

            filterImportExportService.changeFilterField(importedFilters.value)
        </action>
    </data>


    <data type="i18n">
        <id>divider_1</id>
        <title/>
        <component>
            <id>divider</id>
        </component>
    </data>

    <!-- I18NS -->
    <i18n locale="sk">
        <i18nString id="import_filters">Import filtrov</i18nString>
        <i18nString id="upload_file">Nahratie súboru s filtrami</i18nString>
        <i18nString id="upload_file_placeholder">Vložete súbor obsahujúci filtre</i18nString>
        <i18nString id="upload_file_desc">Vložte xml súbor, ktorý obsahuje filtre</i18nString>
        <i18nString id="import_file_placeholder">Importovať filtre</i18nString>
        <i18nString id="import_file_desc">Importovať filtre z nahraného xml súboru</i18nString>
    </i18n>
    <i18n locale="de">
        <i18nString id="import_filters">Import von Filtern</i18nString>
        <i18nString id="upload_file">Filterdatei hochladen</i18nString>
        <i18nString id="upload_file_placeholder">Datei mit Filtern einfügen</i18nString>
        <i18nString id="upload_file_desc">Xml-Datei einfügen, die Filter enthält</i18nString>
        <i18nString id="import_file_placeholder">Filter importieren</i18nString>
        <i18nString id="import_file_desc">Filter aus hochgeladener xml-Datei importieren</i18nString>
    </i18n>
    <!-- TRANSITIONS -->
    <transition>
        <id>importFilter</id>
        <x>200</x>
        <y>100</y>
        <title id="import_file_placeholder">Import filters</title>
        <assignPolicy>auto</assignPolicy>
        <grid>
            <id>select_user_grid</id>
            <item>
                <dataRef>
                    <id>upload_file</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <grid-column>1 / 2</grid-column>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>import_file</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="set">
                        <id>import_file_importFilter_set</id>
                        <actions phase="post">
                            <action>
                                importedFiltersRef: f.imported_filters;

                                change importedFiltersRef value { importFilters() }
                            </action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <grid-column>2 / 3</grid-column>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>divider_1</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <grid-column>1 / span 2</grid-column>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>imported_filters</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <grid-column>1 / span 2</grid-column>
                </properties>
            </item>
            <properties>
                <display>grid</display>
                <grid-template-columns>repeat(2, 1fr)</grid-template-columns>
                <justify-items>stretch</justify-items>
                <align-items>stretch</align-items>
                <justify-content>stretch</justify-content>
                <align-content>stretch</align-content>
            </properties>
        </grid>
        <event type="finish">
            <id>importFilter_finish</id>
            <actions phase="pre">
                <action>
                    importedFilters: f.imported_filters;

                    taskService.finishTasks(taskService.findAllById(importedFilters.value), userService.getLoggedUser())
                    change importedFilters value { [] }
                </action>
            </actions>
        </event>
        <event type="cancel">
            <id>importFilter_cancel</id>
            <actions phase="pre">
                <action>
                    importedFilters: f.imported_filters;

                    taskService.findAllById(importedFilters.value).forEach({filterTask ->
                        workflowService.deleteCase(filterTask.caseId)
                    })
                    change importedFilters value { [] }
                </action>
            </actions>
        </event>
    </transition>
    <!-- PLACES -->
    <place>
        <id>p1</id>
        <x>100</x>
        <y>100</y>
        <tokens>1</tokens>
    </place>
    <!-- ARCS -->
    <arc>
        <id>a1</id>
        <type>regular</type>
        <sourceId>p1</sourceId>
        <destinationId>importFilter</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a2</id>
        <type>regular</type>
        <sourceId>importFilter</sourceId>
        <destinationId>p1</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
</process>
