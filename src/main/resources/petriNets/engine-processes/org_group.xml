<?xml version="1.0" encoding="UTF-8"?>
<!--TODO: release/8.0.0 change schema location-->
<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
	<id>org_group</id>
	<version>1.0.0</version>
	<title>Organization group</title>
	<caseName dynamic="true"></caseName>
	<icon>home</icon>
	<defaultRole>true</defaultRole>
	<!-- FUNCTIONS -->
	<function scope="process" name="updateAvailableEntries">
		{
			com.netgrif.application.engine.workflow.domain.Case useCase ->

			def cases = findCasesElastic(
							"processIdentifier:\"preference_filter_item\" AND dataSet.parentId.textValue.keyword:\"$useCase.stringId\"" as String,
							org.springframework.data.domain.PageRequest.of(0, 1000))
			change availableEntries options { return menuImportExportService.createAvailableEntriesChoices(cases) }
		}
	</function>
	<!-- ROLES -->
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<!-- DATA -->
	<data type="text">
		<id>group_id</id>
		<title>Group ID</title>
		<placeholder>Enter group ID</placeholder>
		<desc>ID of organization group</desc>
		<event type="get">
			<id>group_id_get</id>
			<actions phase="pre">
				<action>
					id: f.group_id;

					change id value { useCase.stringId }
				</action>
			</actions>
		</event>
	</data>
	<data type="user">
		<id>author</id>
		<title>Group Author</title>
	</data>
	<data type="text">
		<id>group_name</id>
		<title>Group name</title>
		<placeholder>Enter group name</placeholder>
		<desc>Name of organization group</desc>
		<event type="set">
			<id>group_name_set</id>
			<actions phase="post">
				<action>
					name: f.group_name;

					useCase.setTitle(name.value.value)
					workflowService.save(useCase)
				</action>
			</actions>
		</event>
	</data>
	<data type="user">
		<id>user_selection</id>
		<title>Select user</title>
		<placeholder>No user selected</placeholder>
		<desc>Select user to be added as a group member</desc>
		<event type="get">
			<id>user_selection_get</id>
			<actions phase="pre">
				<action>
					userField: f.user_selection;

					change userField value { null }
				</action>
			</actions>
		</event>
		<event type="set">
			<id>user_selection_set</id>
			<actions phase="post">
				<action>
					selection: f.members,
					userField: f.user_selection;

					if (userField.value != null) {
						change selection options {  nextGroupService.addUser(userField.value.value, selection.options) }
					}
				</action>
			</actions>
		</event>
	</data>
	<data type="multichoice_map">
		<id>members</id>
		<title>Members</title>
		<desc>Members of current organization group</desc>
		<component>
			<id>list</id>
		</component>
	</data>
	<data type="enumeration_map">
		<id>user_action_selection</id>
		<title id="user_action_selection">Select action</title>
		<options>
			<option key="add" id="user_action_selection_add">Add existing user</option>
			<option key="invite" id="user_action_selection_invite">Invite new user</option>
		</options>
		<init>add</init>
		<event type="set">
			<id>user_action_selection_set</id>
			<actions phase="post">
				<action>
					action_selection: f.user_action_selection,
					user_selection: f.user_selection,
					invite_by_mail: f.invite_by_mail,
					trans: t.8;

					make user_selection, editable on trans when { action_selection.value.value == "add" }
					make invite_by_mail, hidden on trans when { action_selection.value.value == "add" }

					make user_selection, hidden on trans when { action_selection.value.value == "invite" }
					make invite_by_mail, editable on trans when { action_selection.value.value == "invite" }
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>invite_by_mail</id>
		<title id="invite_by_mail">Add e-mail address</title>
		<placeholder>example@example.com</placeholder>
		<desc id="invite_by_mail_desc">Add e-meail address to send invitation</desc>
		<validations>
			<validation>
				<name>email</name>
			</validation>
		</validations>
	</data>
	<data type="taskRef">
		<id>imported_menu_ids</id>
	</data>
	<data type="file">
		<id>export_menu_file</id>
		<title id="export_file">Exported menu file</title>
		<placeholder id="export_file_placeholder">Your XML file with menus</placeholder>
		<desc id="export_file_desc">Download exported file with menus in XML format.</desc>
	</data>
	<data type="button">
		<id>update_available_entries_btn</id>
		<placeholder id="update_available_entries_btn_placeholder">Update entries</placeholder>
		<action trigger="set">
			updateAvailableEntries(useCase)
		</action>
	</data>
	<data type="button">
		<id>clear_menu_selection_btn</id>
		<placeholder id="clear_menu_selection_btn_placeholder">Clear menu configurations</placeholder>
		<action trigger="set">
			change menusForExport options {[:]}
		</action>
	</data>
	<data type="text">
		<id>export_menu_name</id>
		<title id="exported_menu_id">Exported menu identifier</title>
		<desc id="exported_menu_id_desc">Unique name menu configuration for selected entries.</desc>
		<action trigger="set">
			if (export_menu_name.rawValue == "") {
				make add_to_export_btn, visible on navigationMenuConfig when {true}
			} else {
				make add_to_export_btn, editable on navigationMenuConfig when {true}
			}
		</action>
	</data>
	<data type="multichoice_map">
		<id>available_export_entries</id>
		<title id="available_export_entries">Available entries for export</title>
		<placeholder id="available_export_entries_placeholder">Export menu</placeholder>
	</data>
	<data type="button">
		<id>add_to_export_btn</id>
		<placeholder id="add_to_export_placeholder">Add entries to export</placeholder>
		<action trigger="set">
			selectedEntries: f.available_export_entries,
			addToExportBtn: f.this,
			menuIdentifier: f.export_menu_name,
			menusForExport: f.menus_for_export;

					change menusForExport options { return menuImportExportService.addSelectedEntriesToExport(selectedEntries, menusForExport, menuIdentifier.value.value) }

			change selectedEntries value {[]}
		</action>
		<component>
			<id>raised</id>
		</component>
	</data>
	<data type="enumeration_map">
		<id>menus_for_export</id>
		<title id="menus_for_export">Menus to be exported</title>
	</data>
	<data type="text">
		<id>import_results</id>
		<title id="import_results">Import results</title>
		<component>
			<id>area</id>
		</component>
	</data>
	<data type="button">
		<id>export_menu_btn</id>
		<title/>
		<placeholder id="export_menu_btn_placeholder">Export menu</placeholder>
		<action trigger="set">
			change export_menu_file value { menuImportExportService.exportMenu(menus_for_export, group_id.value.value, export_menu_file) }
			change menus_for_export options {[:]}
		</action>
		<component>
			<id>raised</id>
		</component>
	</data>
	<data type="file">
		<id>import_menu_file</id>
		<title>Import menu</title>
		<placeholder id="import_file_placeholder">Menu file to import</placeholder>
		<desc id="import_file_desc">Upload XML file containing menu here</desc>
	</data>
	<data type="button">
		<id>import_menu_btn</id>
		<title/>
		<placeholder id="import_menu_btn_placeholder">Import menu</placeholder>
		<desc id="import_menu_btn_desc">Import menu from provided XML file</desc>
		<action trigger="set">
			import_file: f.import_menu_file,
			groupId: f.group_id,
			newEntries: f.imported_menu_ids,
			newIdsActionSetter: f.new_entries_setter,
			importResults: f.import_results;

			change importResults value {return ""}

			def cases = findCases({ it.processIdentifier.eq("preference_filter_item") }).findAll { it.dataSet.get("parentId").rawValue == useCase.stringId }
			change newEntries value { return menuImportExportService.importMenu(cases, import_file.value.value, useCase.stringId) }
			// TODO: release/8.0.0 remove?
			def actualUseCase = findCase(useCase.stringId)
			actualUseCase.dataSet.entrySet().forEach{ e ->
				useCase.dataSet[e.key].value.value = e.value.value
				if(e.key == ("imported_menu_ids")) {
					useCase.dataSet[e.key].value.value = newEntries.value.value
				}
			}

		change newIdsActionSetter value { "triggerAction" }
		</action>
		<component>
			<id>raised</id>
		</component>
	</data>
	<data type="text">
		<id>new_entries_setter</id>
		<title/>
		<action trigger="set">
			import_file: f.import_menu_file,
			groupId: f.group_id,
			newEntries: f.imported_menu_ids,
			availableEntries: f.available_export_entries,
			importResults: f.import_results;

            // TODO: release/8.0.0 check
			newEntries.value.forEach { itemId -&gt;
				def idSplit = itemId.split(',')
				def initTask = findTask({it.transitionId.eq("init").and(it.caseId.eq(idSplit[0]))})

				setData(initTask, [
					"filter_case": ["type":"caseRef", "value": [idSplit[1]], "allowedNets":["filter"]],
					"use_icon": ["type":"boolean", "value": idSplit[2]]
				])
			}

			finishTask(initTask)

			workflowService.save(useCase)

			updateAvailableEntries(useCase)
		</action>
	</data>


	<data type="i18n">
		<id>grid_header</id>
		<title/>
		<init id="import_export_dg">Import &amp; export of menu entries</init>
		<component>
			<id>divider</id>
		</component>
	</data>

	<!-- I18NS -->
	<i18n locale="sk">
		<i18nString id="author">Autor grupy</i18nString>
		<i18nString id="group_id">ID grupy</i18nString>
		<i18nString id="group_id_desc">ID organizačnej grupy</i18nString>
		<i18nString id="group_id_placeh">Zadajte ID grupy</i18nString>
		<i18nString id="group_name">Názov grupy</i18nString>
		<i18nString id="group_name_desc">Názov organizačnej grupy</i18nString>
		<i18nString id="group_name_placeh">Zadajte názov grupy</i18nString>
		<i18nString id="user_selection">Vyberte nového používateľa</i18nString>
		<i18nString id="user_selection_desc">Vyberte nového používateľa pre pridanie do grupy</i18nString>
		<i18nString id="user_selection_placeh">Nebol vybraný žiadny používateľ</i18nString>
		<i18nString id="members">Členovia grupy</i18nString>
		<i18nString id="members_desc">Členovia organizačnej grupy</i18nString>
		<i18nString id="user_action_selection">Vyberte akciu</i18nString>
		<i18nString id="user_action_selection_add">Pridať existujúceho používateľa</i18nString>
		<i18nString id="user_action_selection_invite">Pozvať nového používateľa</i18nString>
		<i18nString id="invite_by_mail">Zadaj e-mail adresu</i18nString>
		<i18nString id="invite_by_mail_desc">Zadaj e-mail adresu</i18nString>
		<i18nString id="select_menu_item_filter">Zvoľte filter</i18nString>
		<i18nString id="add_menu_item">Pridať ako položku menu</i18nString>
		<i18nString id="menu_configuration">Konfigurácia menu</i18nString>
		<i18nString id="export_file">Exportovaný súbor s menu</i18nString>
		<i18nString id="export_file_desc">Stiahnite exportovaný XML súbor s menu položkami.</i18nString>
		<i18nString id="export_file_placeholder">Váš XML súbor s vybranou menu konfiguráciou.</i18nString>
		<i18nString id="exported_menu_id">Identifikátor menu nakonfigurovaného na export</i18nString>
		<i18nString id="exported_menu_id_desc">Unikátny názov menu pre zvolenú konfiguráciu.</i18nString>
		<i18nString id="available_export_entries">Dostupné menu položky pre export</i18nString>
		<i18nString id="available_export_entries_placeholder">Export menu</i18nString>
		<i18nString id="add_to_export_placeholder">Pridať menu na export</i18nString>
		<i18nString id="menus_for_export">Menu položky pripravené na export</i18nString>
		<i18nString id="import_results">Výsledky importu</i18nString>
		<i18nString id="export_menu_btn_placeholder">Exportovať menu</i18nString>
		<i18nString id="update_available_entries_btn_placeholder">Aktualizovať dostupné položky</i18nString>
		<i18nString id="clear_menu_selection_btn_placeholder">Zmazať vytvorené konfigurácie</i18nString>
		<i18nString id="import_export_dg">Import a export položiek menu</i18nString>
	</i18n>
	<i18n locale="de">
		<i18nString id="select_menu_item_filter">Filter auswählen</i18nString>
		<i18nString id="add_menu_item">Als Menüpunkt hinzufügen</i18nString>
		<i18nString id="menu_configuration">Menükonfiguration</i18nString>
		<i18nString id="export_file">Exportierte Datei mit Menüs</i18nString>
		<i18nString id="export_file_desc">Exportierte XML-Datei mit Menüs herunterladen.</i18nString>
		<i18nString id="export_file_placeholder">Ihre XML-Datei mit Menüs</i18nString>
		<i18nString id="exported_menu_id">Name des für den Export konfigurierten Menüs</i18nString>
		<i18nString id="exported_menu_id_desc">Eindeutiger Name des Menüs für die gewählte Konfiguration.</i18nString>
		<i18nString id="available_export_entries">Verfügbare Menüeinträge für den Export</i18nString>
		<i18nString id="available_export_entries_placeholder">Menü exportieren</i18nString>
		<i18nString id="add_to_export_placeholder">Menü zum Export hinzufügen</i18nString>
		<i18nString id="menus_for_export">Menüeinträge bereit für den Export</i18nString>
		<i18nString id="import_results">Import Ergebnisse</i18nString>
		<i18nString id="export_menu_btn_placeholder">Menü exportieren</i18nString>
		<i18nString id="update_available_entries_btn_placeholder">Verfügbare Menüeinträge aktualisieren</i18nString>
		<i18nString id="clear_menu_selection_btn_placeholder">Menükonfigurationen löschen</i18nString>
		<i18nString id="import_export_dg">Import und Export von Menüeinträge</i18nString>
	</i18n>
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>220</x>
		<y>220</y>
		<title>Initialize group</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>2_grid</id>
			<item>
				<dataRef>
					<id>group_id</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>author</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>group_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>1fr</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
		<event type="finish">
			<id>2_finish</id>
			<actions phase="pre">
				<action>
                    <!--@formatter:off-->
                    // TODO: release/8.0.0
                    defaultFilters = findDefaultFilters()

					defaultFilters.forEach { filterCase -&gt;
						def optionCase = createCase("preference_filter_item", filterCase.title + " filter preference")

						def initTask = findTask(optionCase.getTaskStringId("init"))
						assignTask(initTask)
						setData(initTask, new DataSet([
								"filter_case": new CaseField(rawValue: [filterCase.stringId], allowedNets: ["filter"]),
								"parentId": new TextField(rawValue: useCase.stringId),
								"menu_identifier": new TextField(rawValue: "defaultMenu")
						]))
						finishTask(initTask)
					}

					updateAvailableEntries(useCase)
					<!--@formatter:on-->
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>6</id>
		<x>740</x>
		<y>100</y>
		<title>Group info</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>6_grid</id>
			<item>
				<dataRef>
					<id>group_id</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>author</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>group_name</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>members</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>1fr</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
	</transition>
	<transition>
		<id>8</id>
		<x>500</x>
		<y>340</y>
		<title>Add user</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>8_grid</id>
			<item>
				<dataRef>
					<id>user_action_selection</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>user_selection</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>invite_by_mail</id>
					<logic>
						<behavior>hidden</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>members</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>1fr</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
		<event type="finish">
			<id>8_finish</id>
			<actions phase="pre">
				<action>
					action_selection: f.user_action_selection,
					invite_by_mail: f.invite_by_mail,
					members: f.members;

					if(action_selection.value.value == "invite" &amp;&amp; invite_by_mail.value.value != null){
						change members options { nextGroupService.inviteUser(invite_by_mail.value.value, members.options, useCase) }
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>25</id>
		<x>740</x>
		<y>340</y>
		<title>Edit group info</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>25_grid</id>
			<item>
				<dataRef>
					<id>group_id</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>author</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>group_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>1fr</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
	</transition>
	<transition>
		<id>28</id>
		<x>500</x>
		<y>100</y>
		<title>Remove user</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>28_grid</id>
			<item>
				<dataRef>
					<id>members</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>1fr</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
		<event type="finish">
			<id>28_finish</id>
			<actions phase="pre">
				<action>
					members: f.members;

					change members options { nextGroupService.removeUser(members.value.value, members.options, useCase) }
					change members value { [] }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>navigationMenuConfig</id>
		<x>380</x>
		<y>100</y>
		<title id="menu_configuration">Configure menu</title>
		<assignPolicy>auto</assignPolicy>
		<grid>
			<id>navigationMenuConfig_grid</id>
			<item>
				<dataRef>
					<id>grid_header</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / span 5</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>available_export_entries</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>export_menu_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>2 / span 2</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>update_available_entries_btn</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>4 / 5</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>add_to_export_btn</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>5 / 6</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>menus_for_export</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / span 3</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>clear_menu_selection_btn</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>4 / 5</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>export_menu_btn</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>5 / 6</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>export_menu_file</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / span 3</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>import_menu_file</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / span 3</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>import_menu_btn</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>4 / 5</grid-column>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>import_results</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<grid-column>1 / span 5</grid-column>
				</properties>
			</item>
			<properties>
				<display>grid</display>
				<grid-template-columns>repeat(5, 1fr)</grid-template-columns>
				<justify-items>stretch</justify-items>
				<align-items>stretch</align-items>
				<justify-content>stretch</justify-content>
				<align-content>stretch</align-content>
			</properties>
		</grid>
	</transition>

	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>100</x>
		<y>220</y>
		<title>#init</title>
		<tokens>1</tokens>
	</place>
	<place>
		<id>4</id>
		<x>620</x>
		<y>220</y>
		<title>Group created</title>
		<tokens>0</tokens>
	</place>
	<place>
		<id>p1</id>
		<x>300</x>
		<y>100</y>
		<tokens>0</tokens>
	</place>
	<!-- ARCS -->
	<arc>
		<id>3</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>5</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>18</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>21</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>22</id>
		<type>regular</type>
		<sourceId>8</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>26</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>27</id>
		<type>regular</type>
		<sourceId>25</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>29</id>
		<type>regular</type>
		<sourceId>28</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>28</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a3</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>p1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>read</type>
		<sourceId>p1</sourceId>
		<destinationId>navigationMenuConfig</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</process>
