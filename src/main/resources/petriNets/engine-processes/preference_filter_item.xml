<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
	<id>preference_filter_item</id>
	<version>1.0.0</version>
	<title>Preference filter item</title>
	<icon>list</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>false</anonymousRole>
	<properties>
		<property key="initials">PFI</property>
	</properties>
	<processEvents/>
	<caseEvents/>
	<data type="button">
		<id>add_allowed_roles</id>
		<title/>
		<placeholder id="allow_roles">Allow view for roles</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_4">
					<![CDATA[
					change allowed_roles options {return configurableMenuService.addSelectedRoles(allowed_roles, processes_available, roles_available)}
					change roles_available value {[]}
					change roles_available options {[:]}
					change processes_available value {null}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>add_banned_roles</id>
		<title/>
		<placeholder id="ban_roles">Ban view for roles</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_6">
					<![CDATA[
					change banned_roles options {return configurableMenuService.addSelectedRoles(banned_roles, processes_available, roles_available)}
					change roles_available value {[]}
					change roles_available options {[:]}
					change processes_available value {null}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="multichoice_map">
		<id>allowed_nets</id>
		<title id="allowed_nets">Allowed nets</title>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>allowed_roles</id>
		<title id="roles_allowed">Allowed roles</title>
		<desc id="roles_allowed_desc">List of roles allowed to view this menu entry.</desc>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>banned_roles</id>
		<title id="roles_banned">Banned roles</title>
		<desc id="roles_banned_desc">List of roles not allowed to view this menu entry.</desc>
	</data>
	<data type="text" immediate="true">
		<id>create_case_button_icon</id>
		<title id="create_case_button_icon">"New case" button icon identifier</title>
		<event type="set">
			<actions phase="post">
				<action id="action_10">
					<![CDATA[
					if (create_case_button_icon.rawValue == "") {
						change create_case_button_icon_preview value {"""<span></span>"""}
						return;
					}
					change create_case_button_icon_preview value {
						"""<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">""" + create_case_button_icon.rawValue + """</span>"""
					}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text" immediate="true">
		<id>create_case_button_icon_preview</id>
		<title id="create_case_button_icon_preview">Menu icon preview</title>
		<component>
			<id>htmltextarea</id>
		</component>
	</data>
	<data type="text" immediate="true">
		<id>create_case_button_title</id>
		<title id="create_case_button_title">"New case" button title</title>
	</data>
	<data type="text" immediate="true">
		<id>default_headers</id>
		<title id="default_headers">Set default headers</title>
	</data>
	<data type="text">
		<id>entry_default_name</id>
		<title id="menu_item_title">Menu item title</title>
	</data>
	<data type="text">
		<id>entry_marker</id>
		<title/>
	</data>
	<data type="enumeration" immediate="true">
		<id>entry_name</id>
		<title/>
	</data>
	<data type="caseRef">
		<id>filter_case</id>
		<title/>
		<allowedNets>
			<allowedNet>filter</allowedNet>
		</allowedNets>
	</data>
	<data type="taskRef">
		<id>filter_preview</id>
		<title/>
	</data>
	<data type="text" immediate="true">
		<id>icon_name</id>
		<title id="icon_identifier">Menu icon identifier</title>
		<desc id="icon_identifier_desc">Material icon identifier. List of icons with identifiers is available online.</desc>
		<event type="set">
			<actions phase="post">
				<action id="action_3">
					<![CDATA[
					if (icon_name.rawValue == "") {
						change icon_preview value {"""<span></span>"""}
						return;
					}
					change icon_preview value {
						"""<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">""" + icon_name.rawValue + """</span>"""
					}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>icon_preview</id>
		<title id="icon_preview">Menu icon preview</title>
		<component>
			<id>htmltextarea</id>
		</component>
	</data>
	<data type="text">
		<id>menu_identifier</id>
		<title id="menu_identifier">Identifier of menu which is this menu entry part of.</title>
		<init>default</init>
	</data>
	<data type="text" immediate="true">
		<id>menu_item_identifier</id>
		<title>Identifik√°tor (Filter API)</title>
	</data>
	<data type="button">
		<id>move_option_down</id>
		<title/>
		<placeholder id="move_down">Down</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_1">
					<![CDATA[
					if (!task.isPresent()) {
						return;
					}
					def parentCase = findCase({it.id.eq(new org.bson.types.ObjectId(parentId.rawValue))});
					def previousTaskRefValue = parentCase.dataSet.get("filter_tasks").rawValue
					def currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId})
					if (currentIndex != previousTaskRefValue.size() - 1) {
						previousTaskRefValue.remove(currentIndex)
						previousTaskRefValue.add(currentIndex + 1, task.get().stringId)
						def parentTask = findTask({it.caseId.eq(parentId.rawValue).and(it.transitionId.eq("navigationMenuConfig"))})
						def dataSet = new com.netgrif.application.engine.workflow.web.responsebodies.DataSet([
								"filter_tasks"      : new com.netgrif.application.engine.petrinet.domain.dataset.TaskField(rawValue: previousTaskRefValue),
						])
						setDataWithPropagation(parentTask, dataSet)
					}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>move_option_up</id>
		<title/>
		<placeholder id="move_up">Up</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_0">
					<![CDATA[
					if (!task.isPresent()) {
						return
					}
					def parentCase = findCase({it.id.eq(new org.bson.types.ObjectId(parentId.rawValue))});
					def previousTaskRefValue = parentCase.dataSet.get("filter_tasks").rawValue
					def currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId})
					if (currentIndex != 0) {
						previousTaskRefValue.remove(currentIndex)
						previousTaskRefValue.add(currentIndex - 1, task.get().stringId)
						def parentTask = findTask({it.caseId.eq(parentId.rawValue).and(it.transitionId.eq("navigationMenuConfig"))})
						def dataSet = new com.netgrif.application.engine.workflow.web.responsebodies.DataSet([
								"filter_tasks"      : new com.netgrif.application.engine.petrinet.domain.dataset.TaskField(rawValue: previousTaskRefValue),
						])
						setDataWithPropagation(parentTask, dataSet)
					}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>new_filter_id</id>
		<title/>
	</data>
	<data type="text" immediate="true">
		<id>parentId</id>
		<title/>
	</data>
	<data type="enumeration_map" immediate="true">
		<id>processes_available</id>
		<title id="available_processes">Your processes</title>
		<desc id="available_processes_desc">Select a process containing roles you wish to add to allowed or banned roles lists.</desc>
		<event type="get">
			<actions phase="pre">
				<action id="action_8">
					<![CDATA[
					change processes_available options {return configurableMenuService.getNetsByAuthorAsMapOptions(identity(), org.springframework.context.i18n.LocaleContextHolder.locale)}
					]]>
				</action>
			</actions>
		</event>
		<event type="set">
			<actions phase="post">
				<action id="action_9">
					<![CDATA[
					change roles_available options {return configurableMenuService.getAvailableRolesFromNet(processes_available, allowed_roles, banned_roles)}
					change roles_available value {[]}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>remove_allowed_roles</id>
		<title/>
		<placeholder id="remove_from_allowed_roles">Remove from allowed roles</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_5">
					<![CDATA[
					change allowed_roles options {return configurableMenuService.removeSelectedRoles(allowed_roles)}
					change allowed_roles value {[]}
					change roles_available value {[]}
					change roles_available options {[:]}
					change processes_available value {null}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>remove_banned_roles</id>
		<title/>
		<placeholder id="remove_from_banned_roles">Remove from banned roles</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_7">
					<![CDATA[
					change banned_roles options {return configurableMenuService.removeSelectedRoles(banned_roles)}
					change banned_roles value {[]}
					change roles_available value {[]}
					change roles_available options {[:]}
					change processes_available value {null}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>remove_option</id>
		<title/>
		<placeholder id="remove">Remove</placeholder>
		<event type="set">
			<actions phase="post">
				<action id="action_2">
					<![CDATA[
					if (!task.isPresent()) {
						return;
					}
					def parentCase = findCase({ it.id.eq(new org.bson.types.ObjectId(parentId.rawValue)) });
					def previousTaskRefValue = parentCase.dataSet.get("filter_tasks").rawValue
					def currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId })
					previousTaskRefValue.remove(currentIndex)
					def previousCaseRefValue = parentCase.dataSet.get("referenced_filters").rawValue
					currentIndex = previousCaseRefValue.findIndexOf({ id -> id == filter_case.rawValue[0] })
					previousCaseRefValue.remove(currentIndex)
					def parentTask = findTask({ it.caseId.eq(parentId.rawValue).and(it.transitionId.eq("navigationMenuConfig")) })
					def dataSet = new com.netgrif.application.engine.workflow.web.responsebodies.DataSet([
							"filter_tasks"      : new com.netgrif.application.engine.petrinet.domain.dataset.TaskField(rawValue: previousTaskRefValue),
							"referenced_filters": new com.netgrif.application.engine.petrinet.domain.dataset.CaseField(rawValue: previousCaseRefValue),
					])
					setDataWithPropagation(parentTask, dataSet)
					async.run {
						workflowService.deleteCase(useCase.stringId)
					}
					]]>
				</action>
			</actions>
		</event>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>roles_available</id>
		<title id="available_roles">Available roles from selected process</title>
	</data>
	<data type="boolean" immediate="true">
		<id>use_icon</id>
		<title id="display_icon">Display menu icon?</title>
		<init>true</init>
	</data>
	<i18n locale="sk">
		<i18nString id="menu_item_title">N√°zov polo≈æky menu</i18nString>
		<i18nString id="move_up">Posun√∫≈• nahor</i18nString>
		<i18nString id="move_down">Posun√∫≈• nadol</i18nString>
		<i18nString id="remove">Odstr√°ni≈•</i18nString>
		<i18nString id="display_icon">Zobrazova≈• ikonu?</i18nString>
		<i18nString id="icon_preview">N√°hƒæad ikony</i18nString>
		<i18nString id="icon_identifier">Identifik√°tor ikony</i18nString>
		<i18nString id="icon_identifier_desc">Identifik√°tor Material ikony. Zoznam ikon s identifik√°tormi je dostupn√Ω online.</i18nString>
		<i18nString id="allow_roles">Pridaj k povolen√Ωm roliam</i18nString>
		<i18nString id="remove_from_allowed_roles">Odstr√°≈à z povolen√Ωch rol√≠</i18nString>
		<i18nString id="ban_roles">Pridaj k zak√°zan√Ωm roliam</i18nString>
		<i18nString id="remove_from_banned_roles">Odstr√°≈à zo zak√°zan√Ωch rol√≠</i18nString>
		<i18nString id="processes_available">Va≈°e procesy</i18nString>
		<i18nString id="available_processes_desc">Vyberte proces obsahuj√∫ci roly ktor√© chcete prida≈• do zoznamu povolen√Ωch alebo zak√°zan√Ωch rol√≠.</i18nString>
		<i18nString id="roles_available">Dostupn√© roly</i18nString>
		<i18nString id="allowed_roles">Povolen√© roly</i18nString>
		<i18nString id="allowed_roles_desc">Zoznam rol√≠ ktor√© bud√∫ upravovan√Ω menu z√°znam vidie≈•.</i18nString>
		<i18nString id="banned_roles">Zak√°zan√© roly</i18nString>
		<i18nString id="banned_roles_desc">Zoznam rol√≠ pre ktor√© bude upravovan√Ω menu z√°znam skryt√Ω.</i18nString>
		<i18nString id="create_case_button_title">N√°zov tlaƒçidla "Nov√° in≈°tancia"</i18nString>
		<i18nString id="create_case_button_icon">Identifik√°tor ikony tlaƒçidla "Nov√° in≈°tancia"</i18nString>
		<i18nString id="create_case_button_icon_preview">N√°hƒæad ikony</i18nString>
		<i18nString id="default_headers">Predvolen√© hlaviƒçky</i18nString>
	</i18n>
	<i18n locale="de">
		<i18nString id="menu_item_title">Men√ºpunkttitel</i18nString>
		<i18nString id="move_up">nach oben</i18nString>
		<i18nString id="move_down">nach unten</i18nString>
		<i18nString id="remove">entfernen</i18nString>
		<i18nString id="display_icon">Men√ºikone anzeigen</i18nString>
		<i18nString id="icon_preview">Ikonevorschau</i18nString>
		<i18nString id="icon_identifier">Ikone ID</i18nString>
		<i18nString id="icon_identifier_desc">Material Ikone ID. Liste den Ikonen mit IDs ist online verf√ºgbar.</i18nString>
		<i18nString id="allow_roles">Zu zul√§ssigen Rollen hinzuf√ºgen</i18nString>
		<i18nString id="remove_from_allowed_roles">Aus zul√§ssigen Rollen entfernen</i18nString>
		<i18nString id="ban_roles">Zu verbotenen Rollen hinzuf√ºgen</i18nString>
		<i18nString id="remove_from_banned_roles">Aus verbotenen Rollen entfernen</i18nString>
		<i18nString id="processes_available">Ihre Prozesse</i18nString>
		<i18nString id="available_processes_desc">W√§hlen Sie einen Prozess mit Rollen aus, die Sie zu Listen mit zul√§ssigen oder verbotenen Rollen hinzuf√ºgen m√∂chten.</i18nString>
		<i18nString id="roles_available">Verf√ºgbare Rollen</i18nString>
		<i18nString id="allowed_roles">Zul√§ssige Rollen</i18nString>
		<i18nString id="allowed_roles_desc">Liste der Rollen, die diesen Men√ºeintrag anzeigen d√ºrfen.</i18nString>
		<i18nString id="banned_roles">Verbotene Rollen</i18nString>
		<i18nString id="banned_roles_desc">Liste der Rollen, die diesen Men√ºeintrag nicht anzeigen d√ºrfen.</i18nString>
		<i18nString id="create_case_button_title">Schaltfl√§chentitel "Neuer Fall"</i18nString>
		<i18nString id="create_case_button_icon">Ikone ID</i18nString>
		<i18nString id="create_case_button_icon_preview">Ikonevorschau</i18nString>
		<i18nString id="default_headers">Anzuzeigende Attributmenge ausw√§hlen</i18nString>
	</i18n>
	<transition>
		<id>change_filter</id>
		<x>420</x>
		<y>350</y>
		<title>[Change filter]</title>
		<flex>
			<id>change_filter_flex</id>
			<item>
				<dataRef>
					<id>new_filter_id</id>
					<logic>
						<behavior>editable</behavior>
						<required>true</required>
					</logic>
					<event type="set">
						<id>set_event_0</id>
						<actions phase="post">
							<action id="action_14">
								<![CDATA[
								change filter_case value { [new_filter_id.rawValue] }
								def filterCase = findCase({it.id.eq(filter_case.rawValue[0])})
								change entry_default_name value {return filterCase.title}
								change entry_name value {return filterCase.dataSet["i18n_filter_name"].rawValue}
								change filter_preview value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}
								change icon_name value {filterCase.icon_name}
								]]>
							</action>
						</actions>
					</event>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
		</flex>
	</transition>
	<transition>
		<id>init</id>
		<x>420</x>
		<y>260</y>
		<title/>
		<flex>
			<id>init_flex</id>
			<item>
				<dataRef>
					<id>filter_case</id>
					<logic>
						<behavior>forbidden</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>parentId</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>icon_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
		</flex>
	</transition>
	<transition>
		<id>view</id>
		<x>660</x>
		<y>260</y>
		<title/>
		<flex>
			<id>view_flex</id>
			<item>
				<dataRef>
					<id>entry_default_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
					<event type="set">
						<actions phase="post">
							<action id="action_11">
								<![CDATA[
								def filterCase = findCase({it.id.eq(new org.bson.types.ObjectId(filter_case.rawValue[0]))})
								filterCase.setTitle(entry_default_name.rawValue)
								workflowService.save(filterCase)
								def filter_preview = findTask({ it.id.eq(filter_preview.rawValue[0])})
								setData(filter_preview, [
										"new_title": ["type":"text", "value": entry_default_name.rawValue]
								])
								change entry_name value {return new com.netgrif.application.engine.petrinet.domain.I18nString(entry_default_name.rawValue)}
								]]>
							</action>
						</actions>
					</event>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>move_option_up</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>move_option_down</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>remove_option</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>processes_available</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>roles_available</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>add_allowed_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>allowed_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>remove_allowed_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>add_banned_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>banned_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>remove_banned_roles</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>use_icon</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
					<event type="set">
						<id>0</id>
						<actions phase="post">
							<action id="action_12">
								<![CDATA[
								make icon_preview,visible on this when {use_icon.rawValue}
								make icon_name,editable on this when {use_icon.rawValue}
								make icon_preview,hidden on this when {!use_icon.rawValue}
								make icon_name,hidden on this when {!use_icon.rawValue}
								]]>
							</action>
						</actions>
					</event>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>icon_preview</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>icon_name</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
					<event type="set">
						<actions phase="post">
							<action id="action_13">
								<![CDATA[
								def filterCase = findCase({it.id.eq(new org.bson.types.ObjectId(filter_case.rawValue[0]))})
								filterCase.setIcon(icon_name.rawValue)
								workflowService.save(filterCase)
								]]>
							</action>
						</actions>
					</event>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>filter_preview</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>entry_marker</id>
					<logic>
						<behavior>hidden</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>entry_name</id>
					<logic>
						<behavior>hidden</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>create_case_button_title</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>create_case_button_icon_preview</id>
					<logic>
						<behavior>visible</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>create_case_button_icon</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
			<item>
				<dataRef>
					<id>default_headers</id>
					<logic>
						<behavior>editable</behavior>
					</logic>
				</dataRef>
				<properties>
					<order>0</order>
					<flex-grow>0</flex-grow>
					<flex-shrink>1</flex-shrink>
				</properties>
			</item>
		</flex>
	</transition>
	<place>
		<id>p1</id>
		<x>300</x>
		<y>260</y>
		<tokens>1</tokens>
	</place>
	<place>
		<id>p2</id>
		<x>540</x>
		<y>260</y>
		<tokens>0</tokens>
	</place>
	<arc>
		<id>a4</id>
		<type>regular</type>
		<sourceId>p1</sourceId>
		<destinationId>init</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>regular</type>
		<sourceId>init</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a6</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>view</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a7</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>change_filter</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</process>