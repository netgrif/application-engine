<process xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
    <id>preference_item</id>
    <version>1.0.0</version>
    <title>Preference Item</title>
    <icon>check_box_outline_blank</icon>
    <defaultRole>true</defaultRole>
    <anonymousRole>false</anonymousRole>
    <properties>
        <property key="initials">PRI</property>
    </properties>
    <roleRef>
        <id>admin</id>
        <permission>
            <create>true</create>
            <delete>true</delete>
            <view>true</view>
        </permission>
    </roleRef>
    <roleRef>
        <id>defaultRole</id>
        <permission>
            <create>false</create>
            <delete>false</delete>
            <view>true</view>
        </permission>
    </roleRef>
    <roleRef>
        <id>system</id>
        <permission>
            <create>true</create>
            <delete>true</delete>
            <view>true</view>
        </permission>
    </roleRef>
    <processEvents/>
    <caseEvents>
        <event type="delete">
            <id>preference_item_delete</id>
            <actions phase="pre">
                <action id="0">
					<![CDATA[
                    removeItemChildCases(useCase)
                    ]]>
				</action>
            </actions>
        </event>
    </caseEvents>
    <role>
        <id>admin</id>
        <title>Admin</title>
    </role>
    <role>
        <id>system</id>
        <title>System</title>
    </role>
    <function scope="process" name="removeItemChildCases">
        <![CDATA[
		{
		    com.netgrif.application.engine.workflow.domain.Case useCase
		    ->
		    def childCaseIds = useCase.dataSet['childItemIds'].rawValue
		    if (childCaseIds == null || childCaseIds.isEmpty()) {
		        return
		    }
		    removeChildItemFromParent(useCase.dataSet['parentId'].rawValue[0], useCase)
		    def childCases = workflowService.findAllById(childCaseIds)
		    async.run {
		        childCases.each {
		            workflowService.deleteCase(it)
		        }
		    }
		}
		]]>
    </function>
    <function scope="process" name="updateFilterAutocompleteOptions">
        <![CDATA[
		{
		    com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField filterAutocomplete,
		    com.netgrif.application.engine.petrinet.domain.dataset.TaskField previewTaskRef,
		    com.netgrif.application.engine.petrinet.domain.dataset.CaseField selectedFilterRef,
		    com.netgrif.application.engine.petrinet.domain.dataset.ButtonField updateBtn,
		    com.netgrif.application.engine.petrinet.domain.Transition trans,
		    boolean taskTypeOnly
		    ->
		    if (filterAutocomplete.getOptions()?.containsKey(filterAutocomplete.rawValue)) {
		        change previewTaskRef value {
		            return [findTask({it.caseId.eq(filterAutocomplete.rawValue).and(it.transitionId.eq("view_filter"))}).stringId]
		        }
		        make updateBtn,editable on trans when { true }
		    } else {
		        change filterAutocomplete options {
		            def findAllPredicate
		            if (taskTypeOnly) {
		                findAllPredicate = { filterCase ->
		                    !selectedFilterRef.rawValue.contains(filterCase.stringId) &&
		                    filterCase.dataSet["filter_type"].rawValue == "Task"
		                }
		            } else {
		                findAllPredicate = { filterCase -> !selectedFilterRef.rawValue.contains(filterCase.stringId) }
		            }
		            return findFilters(filterAutocomplete.rawValue != null ? filterAutocomplete.rawValue : "")
		                    .findAll(findAllPredicate)
		                    .collectEntries({filterCase -> [filterCase.stringId, filterCase.title]})
		        }
		        change previewTaskRef value { [] }
		        make updateBtn,visible on trans when { true }
		    }
		}
		]]>
    </function>
    <function scope="process" name="updateOptionsBasedOnValue">
        <![CDATA[
		{
		    com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField toBeUpdated,
		    com.netgrif.application.engine.petrinet.domain.dataset.MultichoiceMapField valueSelector,
		    com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField optionsHolder
		    ->
		    def existingOptions = optionsHolder.options
		    def selectedValues = valueSelector.rawValue
		    def newOptions = [:]
		    if (selectedValues != null) {
		        existingOptions.each { key, value ->
		            if (selectedValues.contains(key)) {
		                newOptions.put(key, value)
		            }
		        }
		    }
		    if (!newOptions.containsKey(toBeUpdated.rawValue)) {
		        change toBeUpdated value { null }
            }
		    change toBeUpdated options { newOptions }
		}
		]]>
    </function>
    <data type="button">
        <id>add_allowed_roles</id>
        <title/>
        <placeholder id="allow_roles">Allow view for roles</placeholder>
        <event type="set">
            <id>add_allowed_roles_set</id>
            <actions phase="post">
                <action id="action_8">
					<![CDATA[
                    change allowed_roles options {return configurableMenuService.addSelectedRoles(allowed_roles, processes_available, roles_available)}
                    change roles_available value {[]}
                    change roles_available options {[:]}
                    change processes_available value {null}
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>add_banned_roles</id>
        <title/>
        <placeholder id="ban_roles">Ban view for roles</placeholder>
        <event type="set">
            <id>add_banned_roles_set</id>
            <actions phase="post">
                <action id="action_10">
					<![CDATA[
                    change banned_roles options {return configurableMenuService.addSelectedRoles(banned_roles, processes_available, roles_available)}
                    change roles_available value {[]}
                    change roles_available options {[:]}
                    change processes_available value {null}
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration_map">
        <id>additional_filter_autocomplete_selection</id>
        <title id="filter_autocomplete_selection">Select new filter</title>
        <component>
            <id>autocomplete_dynamic</id>
        </component>
        <event type="set">
            <id>additional_filter_autocomplete_selection_set</id>
            <actions phase="post">
                <action id="action_23">
					<![CDATA[
                    updateFilterAutocompleteOptions(additional_filter_autocomplete_selection, selected_additional_filter_preview, additional_filter_case, update_additional_filter, task_view_settings, true)
                    ]]>
				</action>
            </actions>
        </event>
        <event type="get">
            <id>additional_filter_autocomplete_selection_get</id>
            <actions phase="pre">
                <action id="action_24">
					<![CDATA[
                    updateFilterAutocompleteOptions(additional_filter_autocomplete_selection, selected_additional_filter_preview, additional_filter_case, update_additional_filter, task_view_settings, true)
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="caseRef">
        <id>additional_filter_case</id>
        <title/>
        <event type="set">
            <id>additional_filter_case_set</id>
            <actions phase="post">
                <action id="action_27">
					<![CDATA[
                    if (additional_filter_case.rawValue[0] == null) {
                        make merge_filters,hidden on task_view_settings when { true }
                        make filter_header,hidden on task_view_settings when { true }
                        make remove_additional_filter,hidden on task_view_settings when { true }
                        change current_additional_filter_preview value { [] }
                        return
                    }
                    def filterCase = findCase(additional_filter_case.rawValue[0])
                    change current_additional_filter_preview value { return [filterCase.tasks["view_filter"].getTaskStringId()] }
                    make merge_filters,editable on task_view_settings when { true }
                    make filter_header,visible on task_view_settings when { true }
                    make remove_additional_filter,editable on task_view_settings when { true }
                    ]]>
				</action>
            </actions>
        </event>
        <allowedNets>
            <allowedNet>filter</allowedNet>
        </allowedNets>
    </data>
    <data type="multichoice_map" immediate="true">
        <id>allowed_roles</id>
        <title id="roles_allowed">Allowed roles</title>
        <desc id="roles_allowed_desc">List of roles allowed to view this menu entry.</desc>
    </data>
    <data type="multichoice_map" immediate="true">
        <id>banned_roles</id>
        <title id="roles_banned">Banned roles</title>
        <desc id="roles_banned_desc">List of roles not allowed to view this menu entry.</desc>
    </data>
    <data type="boolean" immediate="true">
        <id>case_allow_header_table_mode</id>
        <title id="allow_header_table_mode">Allow table mode for headers?</title>
        <init>true</init>
    </data>
    <data type="text" immediate="true">
        <id>case_banned_nets_in_creation</id>
        <title id="case_banned_nets_in_creation">Banned processes for creation</title>
        <desc id="case_banned_nets_in_creation_desc">Write down process identifiers separated by comma. Example: mynet1,mynet2</desc>
        <event type="set">
            <id>case_banned_nets_in_creation_set</id>
            <actions phase="post">
                <action id="action_19">
					<![CDATA[
                    String trimmed = case_banned_nets_in_creation.rawValue?.replaceAll("\\s","")
                    if (case_banned_nets_in_creation.rawValue != trimmed) {
                        change case_banned_nets_in_creation value { trimmed }
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text" immediate="true">
        <id>case_default_headers</id>
        <title id="default_headers">Set default headers</title>
        <desc id="default_headers_desc">Example: "meta-title,meta-visualId"</desc>
        <event type="set">
            <id>case_default_headers_set</id>
            <actions phase="post">
                <action id="action_22">
					<![CDATA[
                    String trimmed = case_default_headers.rawValue?.replaceAll("\\s","")
                    if (case_default_headers.rawValue != trimmed) {
                        change case_default_headers value { trimmed }
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration_map" immediate="true">
        <id>case_headers_default_mode</id>
        <title id="headers_default_mode">Default header mode</title>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="search" id="search">Search</option>
            <option key="edit" id="edit">Edit</option>
        </options>
        <init>sort</init>
    </data>
    <data type="multichoice_map" immediate="true">
        <id>case_headers_mode</id>
        <title id="headers_mode">Header mode</title>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="search" id="search">Search</option>
            <option key="edit" id="edit">Edit</option>
        </options>
        <init>sort,edit,search</init>
        <event type="set">
            <id>case_headers_mode_set</id>
            <actions phase="post">
                <action id="action_20">
					<![CDATA[
                    updateOptionsBasedOnValue(case_headers_default_mode, case_headers_mode, case_headers_options_holder)
                    ]]>
				</action>
            </actions>
        </event>
        <event type="get">
            <id>case_headers_mode_get</id>
            <actions phase="pre">
                <action id="action_21">
					<![CDATA[
                    updateOptionsBasedOnValue(case_headers_default_mode, case_headers_mode, case_headers_options_holder)
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration_map">
        <id>case_headers_options_holder</id>
        <title/>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="search" id="search">Search</option>
            <option key="edit" id="edit">Edit</option>
        </options>
    </data>
    <data type="boolean" immediate="true">
        <id>case_is_header_mode_changeable</id>
        <title id="is_header_mode_changeable">Can header mode be changed?</title>
        <init>true</init>
    </data>
    <data type="boolean" immediate="true">
        <id>case_require_title_in_creation</id>
        <title id="case_require_title_in_creation">Require title input in case creation?</title>
        <init>true</init>
    </data>
    <data type="boolean" immediate="true">
        <id>case_show_more_menu</id>
        <title id="case_show_more_menu">Show more menu for case item?</title>
        <init>false</init>
    </data>
    <data type="i18n">
        <id>case_view_header</id>
        <title/>
        <init id="case_view_header">Case view</init>
        <component>
            <id>divider</id>
        </component>
    </data>
    <data type="enumeration_map" immediate="true">
        <id>case_view_search_type</id>
        <title id="case_view_search_type">Search type for case view</title>
        <options>
            <option key="hidden" id="hidden">Hidden</option>
            <option key="fulltext" id="fulltext">Fulltext</option>
            <option key="fulltext_advanced" id="fulltext_advanced">Fulltext and advanced</option>
        </options>
        <init>fulltext_advanced</init>
    </data>
    <data type="taskRef">
        <id>case_view_settings_taskRef</id>
        <title/>
        <init>case_view_settings</init>
    </data>
    <data type="taskRef">
        <id>childItemForms</id>
        <title/>
    </data>
    <data type="caseRef" immediate="true">
        <id>childItemIds</id>
        <title/>
        <allowedNets>
            <allowedNet>preference_item</allowedNet>
        </allowedNets>
    </data>
    <data type="text" immediate="true">
        <id>create_case_button_icon</id>
        <title id="create_case_button_icon">"New case" button icon identifier</title>
        <init>add</init>
        <event type="set">
            <id>create_case_button_icon_set</id>
            <actions phase="post">
                <action id="action_18">
					<![CDATA[
                    if (create_case_button_icon.rawValue == "") {
                        change create_case_button_icon_preview value {"""<span></span>"""}
                        return;
                    }
                    change create_case_button_icon_preview value {
                        """<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">""" + create_case_button_icon.rawValue + """</span>"""
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text">
        <id>create_case_button_icon_preview</id>
        <title id="create_case_button_icon_preview">Icon preview</title>
        <init>&lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"&gt;&lt;span class="material-icons"&gt;add&lt;/span&gt;</init>
        <component>
            <id>htmltextarea</id>
        </component>
    </data>
    <data type="text" immediate="true">
        <id>create_case_button_title</id>
        <title id="create_case_button_title">"New case" button title</title>
    </data>
    <data type="taskRef">
        <id>current_additional_filter_preview</id>
        <title/>
    </data>
    <data type="taskRef">
        <id>current_filter_preview</id>
        <title/>
    </data>
    <data type="text" immediate="true">
        <id>custom_view_selector</id>
        <title id="custom_view_selector">Custom view configuration selector</title>
        <desc id="custom_view_selector_desc">Example: "demo-tabbed-views"</desc>
    </data>
    <data type="i18n">
        <id>duplicate_new_title</id>
        <title id="duplicate_new_title">Title of duplicated view</title>
    </data>
    <data type="button">
        <id>duplicate_reset_childItemIds</id>
        <title/>
        <event type="set">
            <id>duplicate_reset_childItemIds_set</id>
            <actions phase="post">
                <action id="action_3">
					<![CDATA[
                    change childItemIds value { [] }
                    change hasChildren value { false }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text">
        <id>duplicate_view_identifier</id>
        <title id="duplicate_view_identifier">View identifier</title>
        <desc id="duplicate_view_identifier_desc">Must be unique</desc>
    </data>
    <data type="enumeration_map">
        <id>filter_autocomplete_selection</id>
        <title id="filter_autocomplete_selection">Select new filter</title>
        <component>
            <id>autocomplete_dynamic</id>
        </component>
        <event type="set">
            <id>filter_autocomplete_selection_set</id>
            <actions phase="post">
                <action id="action_14">
					<![CDATA[
                    updateFilterAutocompleteOptions(filter_autocomplete_selection, selected_filter_preview, filter_case, update_filter, item_settings, false)
                    make update_filter,hidden on item_settings when { use_custom_view.rawValue }
                    ]]>
				</action>
            </actions>
        </event>
        <event type="get">
            <id>filter_autocomplete_selection_get</id>
            <actions phase="pre">
                <action id="action_15">
					<![CDATA[
                    updateFilterAutocompleteOptions(filter_autocomplete_selection, selected_filter_preview, filter_case, update_filter, item_settings, false)
                    make update_filter,hidden on item_settings when { use_custom_view.rawValue }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="caseRef">
        <id>filter_case</id>
        <title/>
        <event type="set">
            <id>filter_case_set</id>
            <actions phase="post">
                <action id="action_17">
					<![CDATA[
                    if (filter_case.rawValue == null || filter_case.rawValue == []) {
                        return
                    }
                    def filterCase = findCase(filter_case.rawValue[0])
                    change current_filter_preview value {return [filterCase.tasks["view_filter"].getTaskStringId()]}
                    if (filterCase.dataSet["filter_type"].rawValue == "Case") {
                        make case_view_header,editable on item_settings when { true }
                        make case_view_settings_taskRef,editable on item_settings when { true }
                        make additional_filter_autocomplete_selection,editable on task_view_settings when { true }
                        make update_additional_filter,visible on task_view_settings when { true }
                        make selected_additional_filter_preview,visible on task_view_settings when { true }
                        make merge_filters,visible on task_view_settings when { true }
                        make filter_header,visible on task_view_settings when { true }
                        make current_additional_filter_preview,visible on task_view_settings when { true }
                    } else {
                        make case_view_header,hidden on item_settings when { true }
                        make case_view_settings_taskRef,hidden on item_settings when { true }
                        make additional_filter_autocomplete_selection,hidden on task_view_settings when { true }
                        make update_additional_filter,hidden on task_view_settings when { true }
                        make selected_additional_filter_preview,hidden on task_view_settings when { true }
                        make merge_filters,hidden on task_view_settings when { true }
                        make filter_header,hidden on task_view_settings when { true }
                        make current_additional_filter_preview,hidden on task_view_settings when { true }
                    }
                    make task_view_header,editable on item_settings when { true }
                    make task_view_settings_taskRef,editable on item_settings when { true }
                    change additional_filter_case value { [] }
                    ]]>
				</action>
            </actions>
        </event>
        <allowedNets>
            <allowedNet>filter</allowedNet>
        </allowedNets>
    </data>
    <data type="i18n">
        <id>filter_header</id>
        <title/>
        <init id="filter_header">Current filter</init>
        <component>
            <id>divider</id>
        </component>
    </data>
    <data type="boolean" immediate="true">
        <id>hasChildren</id>
        <title/>
    </data>
    <data type="text" immediate="true">
        <id>menu_icon</id>
        <title id="icon_identifier">Menu icon identifier</title>
        <desc id="icon_identifier_desc">Material icon identifier. List of icons with identifiers is available online.</desc>
        <event type="set">
            <id>menu_icon_set</id>
            <actions phase="post">
                <action id="action_5">
					<![CDATA[
                    changeCaseProperty "menu_icon" about { menu_icon.rawValue; }
                    if (menu_icon.rawValue == "") {
                        change menu_menu_icon_preview value {"""<span></span>"""}
                        return;
                    }
                    change menu_menu_icon_preview value {
                        """<link href="https://fonts.googleapis.com/menu_icon?family=Material+Icons" rel="stylesheet"><span class="material-menu_icons">""" + menu_icon.rawValue + """</span>"""
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text">
        <id>menu_icon_preview</id>
        <title id="icon_preview">Menu icon preview</title>
        <component>
            <id>htmltextarea</id>
        </component>
    </data>
    <data type="text" immediate="true">
        <id>menu_item_identifier</id>
        <title id="menu_item_identifier">Menu item identifier</title>
    </data>
    <data type="i18n" immediate="true">
        <id>menu_name</id>
        <title id="name">Name of the item</title>
        <desc id="name_desc">Will be shown in the menu</desc>
        <event type="set">
            <id>menu_name_set</id>
            <actions phase="post">
                <action id="action_6">
					<![CDATA[
                    changeCaseProperty "title" about { menu_name.rawValue }
                    change menu_menu_name_as_visible choices { [menu_name.rawValue] }
                    change menu_menu_name_as_visible value { menu_name.rawValue }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration">
        <id>menu_name_as_visible</id>
        <title id="name">Name of the item</title>
        <desc id="name_desc">Is shown in the menu</desc>
        <component>
            <id>autocomplete</id>
        </component>
    </data>
    <data type="boolean" immediate="true">
        <id>merge_filters</id>
        <title id="merge_filters">Merge with base filter?</title>
        <init>true</init>
    </data>
    <data type="button">
        <id>move_add_node</id>
        <title/>
        <placeholder id="move_add_node">Add</placeholder>
        <component>
            <id>raised</id>
        </component>
        <event type="set">
            <id>move_add_node_set</id>
            <actions phase="post">
                <action id="action_2">
					<![CDATA[
                    if (move_dest_uri_new_node.rawValue == null || move_dest_uri_new_node.rawValue == "") {
                        return
                    }
                    String prefixUri = move_dest_uri.rawValue.join("/")
                    prefixUri = prefixUri.replace("//","/")
                    String newUri = prefixUri + uriService.getUriSeparator() + move_dest_uri_new_node.rawValue
                    def newNode = uriService.getOrCreate(newUri, com.netgrif.application.engine.petrinet.domain.UriContentType.CASE)
                    change move_dest_uri value { splitUriPath(newNode.uriPath) }
                    change move_dest_uri_new_node value { null }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="multichoice_map">
        <id>move_dest_uri</id>
        <title id="move_dest_uri">Destination URI</title>
        <desc id="move_dest_uri_desc">List of nodes representing destination URI</desc>
        <component>
            <id>autocomplete</id>
        </component>
        <event type="get">
            <id>move_dest_uri_get</id>
            <actions phase="pre">
                <action id="action_0">
					<![CDATA[
                    String uriNodeId = elasticCaseService.findUriNodeId(useCase)
                    def node = uriService.findById(uriNodeId)
                    updateMultichoiceWithCurrentNode(move_dest_uri, node)
                    ]]>
				</action>
            </actions>
        </event>
        <event type="set">
            <id>move_dest_uri_set</id>
            <actions phase="post">
                <action id="action_1">
					<![CDATA[
                    String newUri = move_dest_uri.rawValue.join("/")
                    newUri = newUri.replace("//","/")
                    String corrected = getCorrectedUri(newUri)
                    if (corrected == newUri) {
                        def node = uriService.findByUri(newUri)
                        change move_dest_uri options { findOptionsBasedOnSelectedNode(node) }
                    } else {
                        change move_dest_uri value { splitUriPath(corrected) }
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text">
        <id>move_dest_uri_new_node</id>
        <title id="move_dest_uri_new_node">New node to be added</title>
        <desc id="move_dest_uri_new_node_desc">Enter new node name</desc>
    </data>
    <data type="text">
        <id>move_previous_dest_uri</id>
        <title/>
    </data>
    <data type="text">
        <id>new_filter_id</id>
        <title/>
    </data>
    <data type="text" immediate="true">
        <id>nodePath</id>
        <title id="nodePath">Item URI</title>
        <event type="set">
            <id>nodePath_set</id>
            <actions phase="post">
                <action id="action_4">
					<![CDATA[
                    change menu_item_identifier value {
                        def idx = nodePath.rawValue.lastIndexOf(uriService.getUriSeparator())
                        return nodePath.rawValue.substring(idx + 1)
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>order_down</id>
        <title/>
        <placeholder>south</placeholder>
        <component>
            <id>icon</id>
            <properties>
                <property key="stretch">true</property>
            </properties>
        </component>
        <event type="set">
            <id>order_down_set</id>
            <actions phase="post">
                <action id="action_31">
					<![CDATA[
                    def parentCase = workflowService.findOne(parentId.rawValue[0])
                    def taskId = useCase.tasks.find { it.transition == "row_for_ordering" }.task
                    def taskRefValue = parentCase.dataSet['childItemForms'].rawValue
                    int taskRefValueSize = taskRefValue.size()
                    def caseRefValue = parentCase.dataSet['childItemIds'].rawValue
                    int caseRefValueSize = caseRefValue.size()
                    int idxInTaskRef = taskRefValue.indexOf(taskId)
                    if (idxInTaskRef < taskRefValueSize - 1) {
                        Collections.swap(taskRefValue, idxInTaskRef, idxInTaskRef + 1)
                    }
                    int idxInCaseRef = caseRefValue.indexOf(useCase.stringId)
                    if (idxInCaseRef < caseRefValueSize - 1) {
                        Collections.swap(caseRefValue, idxInCaseRef, idxInCaseRef + 1)
                    }
                    setData("children_order", parentCase, [
                            "childItemForms" : [
                                    "value" : taskRefValue,
                                    "type" : "taskRef"
                            ],
                            "childItemIds" : [
                                    "value" : caseRefValue,
                                    "type" : "caseRef"
                            ]
                    ])
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>order_up</id>
        <title/>
        <placeholder>north</placeholder>
        <component>
            <id>icon</id>
            <properties>
                <property key="stretch">true</property>
            </properties>
        </component>
        <event type="set">
            <id>order_up_set</id>
            <actions phase="post">
                <action id="action_32">
					<![CDATA[
                    def parentCase = workflowService.findOne(parentId.rawValue[0])
                    def taskId = useCase.tasks.find { it.transition == "row_for_ordering" }.task
                    def taskRefValue = parentCase.dataSet['childItemForms'].rawValue
                    def caseRefValue = parentCase.dataSet['childItemIds'].rawValue
                    int idxInTaskRef = taskRefValue.indexOf(taskId)
                    if (idxInTaskRef > 0) {
                        Collections.swap(taskRefValue, idxInTaskRef - 1, idxInTaskRef)
                    } else {
                        return
                    }
                    int idxInCaseRef = caseRefValue.indexOf(useCase.stringId)
                    if (idxInCaseRef > 0) {
                        Collections.swap(caseRefValue, idxInCaseRef - 1, idxInCaseRef)
                    } else {
                        return
                    }
                    setData("children_order", parentCase, [
                            "childItemForms" : [
                                    "value" : taskRefValue,
                                    "type" : "taskRef"
                            ],
                            "childItemIds" : [
                                    "value" : caseRefValue,
                                    "type" : "caseRef"
                            ]
                    ])
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="caseRef">
        <id>parentId</id>
        <title/>
        <allowedNets>
            <allowedNet>preference_item</allowedNet>
        </allowedNets>
    </data>
    <data type="enumeration_map" immediate="true">
        <id>processes_available</id>
        <title id="available_processes">Your processes</title>
        <desc id="available_processes_desc">Select a process containing roles you wish to add to allowed or banned roles lists.</desc>
        <event type="get">
            <id>processes_available_get</id>
            <actions phase="pre">
                <action id="action_12">
					<![CDATA[
                    change processes_available options { return configurableMenuService.getNetsByAuthorAsMapOptions(loggedUser(), org.springframework.context.i18n.LocaleContextHolder.locale) }
                    ]]>
				</action>
            </actions>
        </event>
        <event type="set">
            <id>processes_available_set</id>
            <actions phase="post">
                <action id="action_13">
					<![CDATA[
                    if (processes_available.rawValue != null) {
                        change roles_available options { return configurableMenuService.getAvailableRolesFromNet(processes_available, allowed_roles, banned_roles) }
                    } else {
                        change roles_available options { [:] }
                    }
                    change roles_available value { [] }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>remove_additional_filter</id>
        <title/>
        <placeholder id="remove_additional_filter">Remove additional filter</placeholder>
        <component>
            <id>raised</id>
        </component>
        <event type="set">
            <id>remove_additional_filter_set</id>
            <actions phase="post">
                <action id="action_26">
					<![CDATA[
                    change additional_filter_case value { [] }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>remove_allowed_roles</id>
        <title/>
        <placeholder id="remove_from_allowed_roles">Remove from allowed roles</placeholder>
        <event type="set">
            <id>remove_allowed_roles_set</id>
            <actions phase="post">
                <action id="action_9">
					<![CDATA[
                    change allowed_roles options {return configurableMenuService.removeSelectedRoles(allowed_roles)}
                    change allowed_roles value {[]}
                    change roles_available value {[]}
                    change roles_available options {[:]}
                    change processes_available value {null}
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>remove_banned_roles</id>
        <title/>
        <placeholder id="remove_from_banned_roles">Remove from banned roles</placeholder>
        <event type="set">
            <id>remove_banned_roles_set</id>
            <actions phase="post">
                <action id="action_11">
					<![CDATA[
                    change banned_roles options { return configurableMenuService.removeSelectedRoles(banned_roles) }
                    change banned_roles value { [] }
                    change roles_available value { [] }
                    change roles_available options { [:] }
                    change processes_available value { null }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="multichoice_map" immediate="true">
        <id>roles_available</id>
        <title id="available_roles">Available roles from selected process</title>
    </data>
    <data type="taskRef">
        <id>selected_additional_filter_preview</id>
        <title/>
    </data>
    <data type="taskRef">
        <id>selected_filter_preview</id>
        <title/>
    </data>
    <data type="boolean" immediate="true">
        <id>show_create_case_button</id>
        <title id="show_create_case_button">Show create case button?</title>
        <init>true</init>
    </data>
    <data type="text" immediate="true">
        <id>tab_icon</id>
        <title id="tab_icon">Tab icon identifier</title>
        <desc id="tab_icon_identifier_desc">Material icon identifier. List of icons with identifiers is available online.</desc>
        <event type="set">
            <id>tab_icon_set</id>
            <actions phase="post">
                <action id="action_7">
					<![CDATA[
                    if (tab_icon.rawValue == "") {
                        change tab_tab_icon_preview value {"""<span></span>"""}
                        return;
                    }
                    change tab_tab_icon_preview value {
                        """<link href="https://fonts.googleapis.com/tab_icon?family=Material+Icons" rel="stylesheet"><span class="material-tab_icons">""" + tab_icon.rawValue + """</span>"""
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="text">
        <id>tab_icon_preview</id>
        <title>Tab icon preview</title>
        <component>
            <id>htmltextarea</id>
        </component>
    </data>
    <data type="i18n" immediate="true">
        <id>tab_name</id>
        <title id="tab_name">Name of the item</title>
        <desc id="tab_name_desc">Will be shown in tab</desc>
    </data>
    <data type="boolean" immediate="true">
        <id>task_allow_header_table_mode</id>
        <title id="allow_header_table_mode">Allow table mode for headers?</title>
        <init>true</init>
    </data>
    <data type="text" immediate="true">
        <id>task_default_headers</id>
        <title id="task_default_headers">Set default headers</title>
        <desc id="task_default_headers_desc">Example: "meta-title,meta-user"</desc>
        <event type="set">
            <id>task_default_headers_set</id>
            <actions phase="post">
                <action id="action_30">
					<![CDATA[
                    String trimmed = task_default_headers.rawValue?.replaceAll("\\s","")
                    if (task_default_headers.rawValue != trimmed) {
                        change task_default_headers value { trimmed }
                    }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration_map" immediate="true">
        <id>task_headers_default_mode</id>
        <title id="headers_default_mode">Default header mode</title>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="edit" id="edit">Edit</option>
        </options>
        <init>sort</init>
    </data>
    <data type="multichoice_map" immediate="true">
        <id>task_headers_mode</id>
        <title id="headers_mode">Header mode</title>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="edit" id="edit">Edit</option>
        </options>
        <init>sort,edit</init>
        <event type="set">
            <id>task_headers_mode_set</id>
            <actions phase="post">
                <action id="action_28">
					<![CDATA[
                    updateOptionsBasedOnValue(task_headers_default_mode, task_headers_mode, task_headers_options_holder)
                    ]]>
				</action>
            </actions>
        </event>
        <event type="get">
            <id>task_headers_mode_get</id>
            <actions phase="pre">
                <action id="action_29">
					<![CDATA[
                    updateOptionsBasedOnValue(case_headers_default_mode, case_headers_mode, case_headers_options_holder)
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="enumeration_map">
        <id>task_headers_options_holder</id>
        <title/>
        <options>
            <option key="sort" id="sort">Sort</option>
            <option key="edit" id="edit">Edit</option>
        </options>
    </data>
    <data type="boolean" immediate="true">
        <id>task_is_header_mode_changeable</id>
        <title id="is_header_mode_changeable">Can header mode be changed?</title>
        <init>true</init>
    </data>
    <data type="boolean" immediate="true">
        <id>task_show_more_menu</id>
        <title id="task_show_more_menu">Show more menu for task item?</title>
        <init>true</init>
    </data>
    <data type="i18n">
        <id>task_view_header</id>
        <title/>
        <init id="task_view_header">Task view</init>
        <component>
            <id>divider</id>
        </component>
    </data>
    <data type="enumeration_map" immediate="true">
        <id>task_view_search_type</id>
        <title id="task_view_search_type">Search type for task view</title>
        <options>
            <option key="hidden" id="hidden">Hidden</option>
            <option key="fulltext" id="fulltext">Fulltext</option>
            <option key="fulltext_advanced" id="fulltext_advanced">Fulltext and advanced</option>
        </options>
        <init>fulltext_advanced</init>
    </data>
    <data type="taskRef">
        <id>task_view_settings_taskRef</id>
        <title/>
        <init>task_view_settings</init>
    </data>
    <data type="button">
        <id>update_additional_filter</id>
        <title/>
        <placeholder id="update_filter">Update view with selected filter</placeholder>
        <component>
            <id>raised</id>
        </component>
        <event type="set">
            <id>update_additional_filter_set</id>
            <actions phase="post">
                <action id="action_25">
					<![CDATA[
                    change additional_filter_case value { [additional_filter_autocomplete_selection.rawValue] }
                    change additional_filter_autocomplete_selection value { "" }
                    make update_additional_filter,visible on task_view_settings when { true }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="button">
        <id>update_filter</id>
        <title/>
        <placeholder id="update_filter">Update view with selected filter</placeholder>
        <component>
            <id>raised</id>
        </component>
        <event type="set">
            <id>update_filter_set</id>
            <actions phase="post">
                <action id="action_16">
					<![CDATA[
                    change filter_case value { [filter_autocomplete_selection.rawValue] }
                    change filter_autocomplete_selection value { "" }
                    make update_filter,visible on item_settings when { true }
                    ]]>
				</action>
            </actions>
        </event>
    </data>
    <data type="boolean" immediate="true">
        <id>use_case_default_headers</id>
        <title id="case_default_headers">Use custom default headers?</title>
        <init>true</init>
    </data>
    <data type="boolean" immediate="true">
        <id>use_custom_view</id>
        <title id="use_custom_view">Use custom view?</title>
        <init>false</init>
    </data>
    <data type="boolean" immediate="true">
        <id>use_tab_icon</id>
        <title id="display_tab_icon">Display tab icon?</title>
        <init>true</init>
    </data>
    <data type="boolean" immediate="true">
        <id>use_task_default_headers</id>
        <title id="use_default_headers">Use custom default headers?</title>
        <init>true</init>
    </data>
    <i18n locale="sk">
        <i18nString id="icon_preview">Náhľad ikony</i18nString>
        <i18nString id="icon_identifier">Identifikátor ikony</i18nString>
        <i18nString id="icon_identifier_desc">Identifikátor Material ikony. Zoznam ikon s identifikátormi je dostupný online.</i18nString>
        <i18nString id="allow_roles">Pridaj k povoleným roliam</i18nString>
        <i18nString id="remove_from_allowed_roles">Odstráň z povolených rolí</i18nString>
        <i18nString id="ban_roles">Pridaj k zakázaným roliam</i18nString>
        <i18nString id="remove_from_banned_roles">Odstráň zo zakázaných rolí</i18nString>
        <i18nString id="available_processes">Vaše procesy</i18nString>
        <i18nString id="available_processes_desc">Vyberte proces obsahujúci roly ktoré chcete pridať do zoznamu povolených alebo zakázaných rolí.</i18nString>
        <i18nString id="available_roles">Dostupné roly</i18nString>
        <i18nString id="create_case_button_title">Názov tlačidla "Nová inštancia"</i18nString>
        <i18nString id="create_case_button_icon">Identifikátor ikony tlačidla "Nová inštancia"</i18nString>
        <i18nString id="create_case_button_icon_preview">Náhľad ikony</i18nString>
        <i18nString id="default_headers">Predvolené hlavičky</i18nString>
        <i18nString id="default_headers_desc">Napríklad: "meta-title,meta-visualId"</i18nString>
        <i18nString id="filter_autocomplete_selection">Zvoľte nový filter</i18nString>
        <i18nString id="move_dest_uri">Cieľové URI</i18nString>
        <i18nString id="duplicate_new_title">Názov duplikovanej položky</i18nString>
        <i18nString id="duplicate_view_identifier">Identifikátor duplikovanej položky</i18nString>
        <i18nString id="duplicate_view_identifier_desc">Musí byť jedinečný</i18nString>
        <i18nString id="name">Názov položky</i18nString>
        <i18nString id="name_desc">Bude zobrazený v menu</i18nString>
        <i18nString id="tab_icon">Identifikátor ikony v karte</i18nString>
        <i18nString id="tab_icon_identifier_desc">Identifikátor Material ikony. Zoznam ikon s identifikátormi je dostupný online.</i18nString>
        <i18nString id="display_tab_icon">Zobraziť ikonu v karte?</i18nString>
        <i18nString id="tab_name">Názov položky</i18nString>
        <i18nString id="tab_name_desc">Bude zobrazený v karte</i18nString>
        <i18nString id="update_filter">Aktualizovať zobrazenie s vybraným filtrom</i18nString>
        <i18nString id="use_custom_view">Použiť vlastné zobrazenie?</i18nString>
        <i18nString id="custom_view_selector">Konfiguračný identifikátor vlastného zobrazenia</i18nString>
        <i18nString id="custom_view_selector_desc">Napríklad: "demo-tabbed-views"</i18nString>
        <i18nString id="case_view_search_type">Typ vyhľadávania prípadov</i18nString>
        <i18nString id="hidden">Skryté</i18nString>
        <i18nString id="fulltext">Fulltext</i18nString>
        <i18nString id="fulltext_advanced">Fulltext a rozšírené</i18nString>
        <i18nString id="case_require_title_in_creation">Vyžadovať názov inštancii pri vytváraní?</i18nString>
        <i18nString id="case_banned_nets_in_creation">Zakázané siete pri vytváraní</i18nString>
        <i18nString id="case_banned_nets_in_creation_desc">Uveďte identifikátory procesov oddelené čiarkou. Napríklad: mynet1,mynet2</i18nString>
        <i18nString id="show_create_case_button">Zobraziť tlačidlo na vytvorenie prípadu?</i18nString>
        <i18nString id="case_show_more_menu">Zobrazovať menu pre prípadovú položku?</i18nString>
        <i18nString id="sort">Zoraďovanie</i18nString>
        <i18nString id="search">Vyhľadávanie</i18nString>
        <i18nString id="edit">Upravovanie</i18nString>
        <i18nString id="merge_filters">Zjednotiť filter so základným filtrom?</i18nString>
        <i18nString id="task_view_search_type">Typ vyhľadávania úloh</i18nString>
        <i18nString id="headers_mode">Mód hlavičiek</i18nString>
        <i18nString id="headers_default_mode">Predvolený mód hlavičiek</i18nString>
        <i18nString id="is_header_mode_changeable">Môže byť mód hlavičiek zmenený?</i18nString>
        <i18nString id="allow_header_table_mode">Povoliť tabuľkový mód pre hlavičky?</i18nString>
        <i18nString id="use_default_headers">Použiť vlastné predvolené hlavičky?</i18nString>
        <i18nString id="task_default_headers">Predvolené hlavičky</i18nString>
        <i18nString id="task_default_headers_desc">Napríklad: "meta-title,meta-user"</i18nString>
        <i18nString id="task_show_more_menu">Zobrazovať menu pre úlohovú položku?</i18nString>
        <i18nString id="item_settings">Nastavenie položky</i18nString>
        <i18nString id="roles_management_title">Roly</i18nString>
        <i18nString id="filter_update_title">Filter</i18nString>
        <i18nString id="move_item">Presunúť položku</i18nString>
        <i18nString id="move_item_finish">Presunúť</i18nString>
        <i18nString id="duplicate_item">Duplikovať položku</i18nString>
        <i18nString id="duplicate_item_finish">Duplikovať</i18nString>
        <i18nString id="additional_filter_update">Dodatočný filter</i18nString>
        <i18nString id="filter_header">Súčasný filter</i18nString>
        <i18nString id="case_view_header">Zobrazenie prípadov</i18nString>
        <i18nString id="task_view_header">Zobrazenie úloh</i18nString>
        <i18nString id="roles_allowed">Povolené roly</i18nString>
        <i18nString id="roles_allowed_desc">Zoznam povolených rolí, ktoré môžu zobraziť túto položku</i18nString>
        <i18nString id="roles_banned">Zakázané roly</i18nString>
        <i18nString id="roles_banned_desc">Zoznam zakázaných rolí, ktoré nemôžu zobraziť túto položku</i18nString>
        <i18nString id="item_settings_general">Všeobecné</i18nString>
        <i18nString id="menu_item_identifier">Identifikátor položky</i18nString>
        <i18nString id="remove_additional_filter">Odstrániť dodatočný filter</i18nString>
        <i18nString id="nodePath">URI položky</i18nString>
        <i18nString id="move_dest_uri_new_node">Nový uzol</i18nString>
        <i18nString id="move_dest_uri_new_node_desc">Uveďte názov uzlu, ktorý chcete pridať</i18nString>
        <i18nString id="move_dest_uri_desc">Zoznam uzlov reprezentujúce cieľovú URI</i18nString>
        <i18nString id="move_add_node">Pridať</i18nString>
    </i18n>
    <i18n locale="de">
        <i18nString id="icon_preview">Ikonevorschau</i18nString>
        <i18nString id="icon_identifier">Ikone ID</i18nString>
        <i18nString id="icon_identifier_desc">Material Ikone ID. Liste den Ikonen mit IDs ist online verfügbar.</i18nString>
        <i18nString id="allow_roles">Zu zulässigen Rollen hinzufügen</i18nString>
        <i18nString id="remove_from_allowed_roles">Aus zulässigen Rollen entfernen</i18nString>
        <i18nString id="ban_roles">Zu verbotenen Rollen hinzufügen</i18nString>
        <i18nString id="remove_from_banned_roles">Aus verbotenen Rollen entfernen</i18nString>
        <i18nString id="available_processes">Ihre Prozesse</i18nString>
        <i18nString id="available_processes_desc">Wählen Sie einen Prozess mit Rollen aus, die Sie zu Listen mit zulässigen oder verbotenen Rollen hinzufügen möchten.</i18nString>
        <i18nString id="available_roles">Verfügbare Rollen</i18nString>
        <i18nString id="create_case_button_title">Schaltflächentitel "Neuer Fall"</i18nString>
        <i18nString id="create_case_button_icon">Ikone ID</i18nString>
        <i18nString id="create_case_button_icon_preview">Ikonevorschau</i18nString>
        <i18nString id="default_headers">Anzuzeigende Attributmenge auswählen</i18nString>
        <i18nString id="filter_autocomplete_selection">Neue Filter auswählen</i18nString>
        <i18nString id="default_headers_desc">Beispiel: "meta-title,meta-visualId"</i18nString>
        <i18nString id="tab_icon_identifier_desc">Material Ikone ID. Liste den Ikonen mit IDs ist online verfügbar.</i18nString>
        <i18nString id="custom_view_selector_desc">Beispiel: "demo-tabbed-views"</i18nString>
        <i18nString id="hidden">Versteckt</i18nString>
        <i18nString id="fulltext">Einfacher Suchmodus</i18nString>
        <i18nString id="sort">Sortieren</i18nString>
        <i18nString id="search">Suchen</i18nString>
        <i18nString id="edit">Bearbeiten</i18nString>
        <i18nString id="headers_mode">Kopfzeilenmodus</i18nString>
        <i18nString id="headers_default_mode">Standardkopfzeilenmodus</i18nString>
        <i18nString id="is_header_mode_changeable">Erlaube Änderung des Kopfzeilenmodus?</i18nString>
        <i18nString id="allow_header_table_mode">Erlaube Tabellenmodus?</i18nString>
        <i18nString id="use_default_headers">Eigene Kopfzeilen verwenden?</i18nString>
        <i18nString id="task_default_headers">Anzuzeigende Attributmenge auswählen</i18nString>
        <i18nString id="task_default_headers_desc">Beispiel: "meta-title,meta-user"</i18nString>
        <i18nString id="roles_management_title">Rollen</i18nString>
        <i18nString id="filter_update_title">Filter</i18nString>
        <i18nString id="additional_filter_update">Zusätzlicher Filter</i18nString>
        <i18nString id="filter_header">Aktueller Filter</i18nString>
        <i18nString id="roles_allowed">Zulässige Rollen</i18nString>
        <i18nString id="item_settings_general">Allgemein</i18nString>
        <i18nString id="menu_item_identifier">Identifikationsnummer des Menüeintrages</i18nString>
        <i18nString id="remove_additional_filter">Zusatzfilter entfernen</i18nString>
        <i18nString id="nodePath">Menüeintrag-URI</i18nString>
        <i18nString id="move_dest_uri_new_node">Neuer Knoten</i18nString>
        <i18nString id="move_add_node">Hinzufügen</i18nString>
        <i18nString id="move_dest_uri">Ziel URI</i18nString>
        <i18nString id="duplicate_new_title">Titel der kopierten Ansicht</i18nString>
        <i18nString id="duplicate_view_identifier">Identifikator der kopierten Ansicht</i18nString>
        <i18nString id="duplicate_view_identifier_desc">Muss einzigartig sein</i18nString>
        <i18nString id="name">Titel des Eintrages</i18nString>
        <i18nString id="name_desc">Wird im Menü angezeigt</i18nString>
        <i18nString id="tab_icon">Ikonen Identifikator der Registerkarte</i18nString>
        <i18nString id="display_tab_icon">Zeige die Registerkarte Ikone an?</i18nString>
        <i18nString id="tab_name">Titel der Registerkarte</i18nString>
        <i18nString id="tab_name_desc">Wird in der Registerkarte angezeigt</i18nString>
        <i18nString id="update_filter">Aktualisiere die Ansicht mit dem ausgewählten Filter</i18nString>
        <i18nString id="use_custom_view">Eigener Ansicht anwenden?</i18nString>
        <i18nString id="custom_view_selector">Konfigurationsidentifikator der eigenen Ansicht</i18nString>
        <i18nString id="case_view_search_type">Suchmodus im Fallansicht</i18nString>
        <i18nString id="fulltext_advanced">Einfacher und erweiterter Suchmodus</i18nString>
        <i18nString id="case_require_title_in_creation">Erforde den Titel beim erzeugen von Fällen?</i18nString>
        <i18nString id="case_banned_nets_in_creation">Ausgeschlossene Prozesse</i18nString>
        <i18nString id="case_banned_nets_in_creation_desc">Trenne die Prozessidentifikatoren mit einer Komma. z.B.: netz1,netz2</i18nString>
        <i18nString id="show_create_case_button">Schaltfläche „Fall erstellen“ anzeigen?</i18nString>
        <i18nString id="case_show_more_menu">"Erweiterte Optionen" Taste bei einzelnen Fällen anzeigen</i18nString>
        <i18nString id="merge_filters">Mit dem Basisfilter kombinieren?</i18nString>
        <i18nString id="task_view_search_type">Suchmodus im Aufgabenansicht</i18nString>
        <i18nString id="task_show_more_menu">"Erweiterte Optionen" Taste bei einzelnen Aufgaben anzeigen</i18nString>
        <i18nString id="item_settings">Menüeintrageinstellungen</i18nString>
        <i18nString id="move_item">Menüeintrag verschieben</i18nString>
        <i18nString id="move_item_finish">verschieben</i18nString>
        <i18nString id="duplicate_item">Menüeintrag duplizieren</i18nString>
        <i18nString id="duplicate_item_finish">duplizieren</i18nString>
        <i18nString id="case_view_header">Fallansicht</i18nString>
        <i18nString id="task_view_header">Aufgabenansicht</i18nString>
        <i18nString id="roles_allowed_desc">Rollen mit Zugriff auf diesen Menüeintrag</i18nString>
        <i18nString id="roles_banned">Verbotene Rollen</i18nString>
        <i18nString id="roles_banned_desc">Rollen, für die wird den Menüeintrag ausgeblendet</i18nString>
        <i18nString id="move_dest_uri_new_node_desc">Nächste URI-Teil angeben</i18nString>
        <i18nString id="move_dest_uri_desc">Teile der Ziel URI</i18nString>
    </i18n>
    <transition>
        <id>case_view_settings</id>
        <x>340</x>
        <y>100</y>
        <title>Case view settings [referenced]</title>
        <roleRef>
            <id>system</id>
            <permission>
                <perform>true</perform>
            </permission>
        </roleRef>
        <flex>
            <id>case_view_settings_flex</id>
            <item>
                <dataRef>
                    <id>case_view_search_type</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>show_create_case_button</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_show_more_menu</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>create_case_button_title</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>create_case_button_icon</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>create_case_button_icon_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_require_title_in_creation</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_banned_nets_in_creation</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_is_header_mode_changeable</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                    <event type="set">
                        <id>case_is_header_mode_changeable_set</id>
                        <actions phase="post">
                            <action id="action_39">
								<![CDATA[
                                make case_headers_mode,editable on case_is_header_case_headers_mode_changeable when { case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_mode,required on case_is_header_case_headers_mode_changeable when { case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_default_mode,editable on case_is_header_case_headers_mode_changeable when { case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_default_mode,required on case_is_header_case_headers_mode_changeable when { case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_mode,hidden on case_is_header_case_headers_mode_changeable when { !case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_mode,optional on case_is_header_case_headers_mode_changeable when { !case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_default_mode,hidden on case_is_header_case_headers_mode_changeable when { !case_is_header_case_headers_mode_changeable.rawValue }
                                make case_headers_default_mode,optional on case_is_header_case_headers_mode_changeable when { !case_is_header_case_headers_mode_changeable.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_allow_header_table_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_headers_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_headers_default_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>use_case_default_headers</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="set">
                        <id>use_case_default_headers_set</id>
                        <actions phase="post">
                            <action id="action_40">
								<![CDATA[
                                make case_default_headers,editable on use_case_default_case_default_headers_case_default_case_default_headers when { use_case_default_case_default_headers.rawValue }
                                make case_default_headers,visible on use_case_default_case_default_headers_case_default_case_default_headers when { !use_case_default_case_default_headers.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_default_headers</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>change_filter</id>
        <x>460</x>
        <y>340</y>
        <title>[Change filter]</title>
        <roleRef>
            <id>system</id>
            <permission>
                <perform>true</perform>
            </permission>
        </roleRef>
        <flex>
            <id>change_filter_flex</id>
            <item>
                <dataRef>
                    <id>new_filter_id</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                    <event type="set">
                        <id>set_event_0</id>
                        <actions phase="post">
                            <action id="action_38">
								<![CDATA[
                                change filter_case value { [new_filter_id.rawValue] }
                                def filterCase = findCase({it._id.eq(filter_case.rawValue[0])})
                                change current_filter_preview value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>children_order</id>
        <x>580</x>
        <y>220</y>
        <title>Manage item order</title>
        <icon>low_priority</icon>
        <assignPolicy>auto</assignPolicy>
        <roleRef>
            <id>admin</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>children_order_flex</id>
            <item>
                <dataRef>
                    <id>childItemForms</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="get">
                        <id>childItemForms_get</id>
                        <actions phase="pre">
                            <action id="action_43">
								<![CDATA[
                                def orderedTaskIds = childItemIds.rawValue?.collect { id -> workflowService.findOne(id).tasks.find { it.transition == "row_for_ordering" }.task }
                                change childItemForms value { orderedTaskIds }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>duplicate_item</id>
        <x>580</x>
        <y>340</y>
        <title id="duplicate_item">Duplicate item</title>
        <icon>content_copy</icon>
        <assignPolicy>auto</assignPolicy>
        <roleRef>
            <id>admin</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>duplicate_item_flex</id>
            <item>
                <dataRef>
                    <id>duplicate_new_title</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>duplicate_view_identifier</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
        <event type="finish">
            <id>finish</id>
            <actions phase="pre">
                <action id="action_37">
					<![CDATA[
                    duplicateMenuItem(useCase, duplicate_new_title.rawValue, duplicate_view_identifier.rawValue)
                    ]]>
				</action>
            </actions>
            <title id="duplicate_item_finish">Duplicate</title>
        </event>
    </transition>
    <transition>
        <id>initialize</id>
        <x>340</x>
        <y>220</y>
        <title>initialize [await sync]</title>
        <icon>hourglass_empty</icon>
        <roleRef>
            <id>admin</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>initialize_flex</id>
            <item>
                <dataRef>
                    <id>filter_case</id>
                    <logic>
                        <behavior>forbidden</behavior>
                    </logic>
                    <event type="set">
                        <id>filter_case_set</id>
                        <actions phase="post">
                            <action id="action_33">
								<![CDATA[
                                if (filter_case.rawValue == null || filter_case.rawValue == []) {
                                    return
                                }
                                def filterCase = findCase({it._id.eq(filter_case.rawValue[0])})
                                if (!menu_name.rawValue) {
                                    change menu_name value {return filterCase.dataSet["i18n_filter_name"].rawValue}
                                }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>item_settings</id>
        <x>460</x>
        <y>100</y>
        <title id="item_settings">Item settings</title>
        <icon>settings</icon>
        <assignPolicy>auto</assignPolicy>
        <roleRef>
            <id>admin</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>item_settings_flex</id>
            <item>
                <dataRef>
                    <id>menu_item_identifier</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>nodePath</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>menu_name</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>menu_icon</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>menu_icon_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>tab_name</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>use_tab_icon</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="set">
                        <id>use_tab_icon_set</id>
                        <actions phase="post">
                            <action id="action_34">
								<![CDATA[
                                make tab_tab_icon_preview,visible on this when { use_tab_icon.rawValue }
                                make tab_icon,editable on this when { use_tab_icon.rawValue }
                                make tab_tab_icon_preview,hidden on this when { !use_tab_icon.rawValue }
                                make tab_icon,hidden on this when { !use_tab_icon.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>tab_icon</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>tab_icon_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>use_custom_view</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="set">
                        <id>use_custom_view_set</id>
                        <actions phase="post">
                            <action id="action_35">
								<![CDATA[
                                make custom_view_selector,editable on this when { use_custom_view.rawValue }
                                make custom_view_selector,visible on this when { !use_custom_view.rawValue }
                                make case_view_header,visible on this when { !use_custom_view.rawValue }
                                make case_view_header,hidden on this when { use_custom_view.rawValue }
                                make case_view_settings_taskRef,editable on this when { !use_custom_view.rawValue }
                                make case_view_settings_taskRef,hidden on this when { use_custom_view.rawValue }
                                make task_view_header,visible on this when { !use_custom_view.rawValue }
                                make task_view_header,hidden on this when { use_custom_view.rawValue }
                                make task_view_settings_taskRef,editable on this when { !use_custom_view.rawValue }
                                make task_view_settings_taskRef,hidden on this when { use_custom_view.rawValue }
                                make use_custom_view_tab_icon,editable on this when { !use_custom_view.rawValue }
                                make use_custom_view_tab_icon,hidden on this when { use_custom_view.rawValue }
                                make tab_icon_preview,visible on this when { !use_custom_view.rawValue }
                                make tab_icon_preview,hidden on this when { use_custom_view.rawValue }
                                make tab_name,editable on this when { !use_custom_view.rawValue }
                                make tab_name,hidden on this when { use_custom_view.rawValue }
                                make tab_icon,editable on this when { !use_custom_view.rawValue }
                                make tab_icon,hidden on this when { use_custom_view.rawValue }
                                make filter_autocomplete_selection,editable on this when { !use_custom_view.rawValue }
                                make filter_autocomplete_selection,hidden on this when { use_custom_view.rawValue }
                                make update_filter,visible on this when { !use_custom_view.rawValue }
                                make update_filter,hidden on this when { use_custom_view.rawValue }
                                make selected_filter_preview,visible on this when { !use_custom_view.rawValue }
                                make selected_filter_preview,hidden on this when { use_custom_view.rawValue }
                                make filter_header,visible on this when { !use_custom_view.rawValue }
                                make filter_header,hidden on this when { use_custom_view.rawValue }
                                make current_filter_preview,visible on this when { !use_custom_view.rawValue }
                                make current_filter_preview,hidden on this when { use_custom_view.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>custom_view_selector</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>processes_available</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>roles_available</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>add_allowed_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>allowed_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>remove_allowed_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>add_banned_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>banned_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>remove_banned_roles</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>filter_autocomplete_selection</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>update_filter</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>selected_filter_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>filter_header</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>current_filter_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_view_header</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>case_view_settings_taskRef</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_view_header</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_view_settings_taskRef</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>move_item</id>
        <x>580</x>
        <y>100</y>
        <title id="move_item">Move item</title>
        <icon>move_down</icon>
        <assignPolicy>auto</assignPolicy>
        <roleRef>
            <id>admin</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>move_item_flex</id>
            <item>
                <dataRef>
                    <id>move_dest_uri</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>move_dest_uri_new_node</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>move_add_node</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
        <event type="finish">
            <id>finish</id>
            <actions phase="pre">
                <action id="action_36">
					<![CDATA[
                    if (move_dest_uri.rawValue == null || move_dest_uri.rawValue == []) {
                        throw new IllegalArgumentException("URI must not be empty!")
                    }
                    String newUri = move_dest_uri.rawValue.join("/")
                    newUri = newUri.replace("//","/")
                    changeMenuItem useCase uri { newUri }
                    ]]>
				</action>
            </actions>
            <title id="move_item_finish">Move</title>
        </event>
    </transition>
    <transition>
        <id>row_for_ordering</id>
        <x>741</x>
        <y>219</y>
        <title>Row for ordering [referenced]</title>
        <roleRef>
            <id>system</id>
            <permission>
                <perform>true</perform>
                <view>true</view>
                <assign>true</assign>
                <cancel>true</cancel>
            </permission>
        </roleRef>
        <flex>
            <id>row_for_ordering_flex</id>
            <item>
                <dataRef>
                    <id>menu_item_identifier</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>menu_name_as_visible</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>order_down</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>order_up</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <transition>
        <id>task_view_settings</id>
        <x>340</x>
        <y>340</y>
        <title>Task view settings [referenced]</title>
        <roleRef>
            <id>system</id>
            <permission>
                <perform>true</perform>
            </permission>
        </roleRef>
        <flex>
            <id>task_view_settings_flex</id>
            <item>
                <dataRef>
                    <id>task_view_search_type</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_show_more_menu</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_is_header_mode_changeable</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                    <event type="set">
                        <id>task_is_header_mode_changeable_set</id>
                        <actions phase="post">
                            <action id="action_41">
								<![CDATA[
                                make task_headers_mode,editable on task_is_header_task_headers_mode_changeable when { task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_mode,required on task_is_header_task_headers_mode_changeable when { task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_default_mode,editable on task_is_header_task_headers_mode_changeable when { task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_default_mode,required on task_is_header_task_headers_mode_changeable when { task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_mode,hidden on task_is_header_task_headers_mode_changeable when { !task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_mode,optional on task_is_header_task_headers_mode_changeable when { !task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_default_mode,hidden on task_is_header_task_headers_mode_changeable when { !task_is_header_task_headers_mode_changeable.rawValue }
                                make task_headers_default_mode,optional on task_is_header_task_headers_mode_changeable when { !task_is_header_task_headers_mode_changeable.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_allow_header_table_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_headers_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_headers_default_mode</id>
                    <logic>
                        <behavior>editable</behavior>
                        <required>true</required>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>use_task_default_headers</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                    <event type="set">
                        <id>use_task_default_headers_set</id>
                        <actions phase="post">
                            <action id="action_42">
								<![CDATA[
                                make task_default_headers,editable on use_task_default_task_default_headers_task_default_task_default_headers when { use_task_default_task_default_headers.rawValue }
                                make task_default_headers,visible on use_task_default_task_default_headers_task_default_task_default_headers when { !use_task_default_task_default_headers.rawValue }
                                ]]>
							</action>
                        </actions>
                    </event>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>task_default_headers</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>additional_filter_autocomplete_selection</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>update_additional_filter</id>
                    <logic>
                        <behavior>editable</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>selected_additional_filter_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>filter_header</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>current_additional_filter_preview</id>
                    <logic>
                        <behavior>visible</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>merge_filters</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
            <item>
                <dataRef>
                    <id>remove_additional_filter</id>
                    <logic>
                        <behavior>hidden</behavior>
                    </logic>
                </dataRef>
                <properties>
                    <order>0</order>
                    <flex-grow>0</flex-grow>
                    <flex-shrink>1</flex-shrink>
                </properties>
            </item>
        </flex>
    </transition>
    <place>
        <id>initialized</id>
        <x>460</x>
        <y>220</y>
        <title>initialized</title>
        <tokens>0</tokens>
    </place>
    <place>
        <id>uninitialized</id>
        <x>220</x>
        <y>220</y>
        <title>uninitialized</title>
        <tokens>1</tokens>
    </place>
    <arc>
        <id>a1</id>
        <type>regular</type>
        <sourceId>uninitialized</sourceId>
        <destinationId>initialize</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a10</id>
        <type>read</type>
        <sourceId>initialized</sourceId>
        <destinationId>duplicate_item</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a12</id>
        <type>read</type>
        <sourceId>initialized</sourceId>
        <destinationId>change_filter</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a13</id>
        <type>read</type>
        <sourceId>initialized</sourceId>
        <destinationId>children_order</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a7</id>
        <type>read</type>
        <sourceId>initialized</sourceId>
        <destinationId>item_settings</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a8</id>
        <type>regular</type>
        <sourceId>initialize</sourceId>
        <destinationId>initialized</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
    <arc>
        <id>a9</id>
        <type>read</type>
        <sourceId>initialized</sourceId>
        <destinationId>move_item</destinationId>
        <multiplicity>1</multiplicity>
    </arc>
</process>