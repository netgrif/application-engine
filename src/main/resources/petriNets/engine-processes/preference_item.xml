<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>preference_item</id>
	<initials>PRI</initials>
	<title>Preference Item</title>
	<icon>check_box_outline_blank</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>false</anonymousRole>
	<transitionRole>false</transitionRole>
	<caseEvents>
		<event type="delete">
			<id>preference_item_delete</id>
			<actions phase="pre">
				<action id="0">
					removeItemChildCases(useCase)
				</action>
			</actions>
		</event>
	</caseEvents>
	<role>
		<id>system</id>
		<title>System</title>
	</role>
	<function scope="process" name="removeItemChildCases">
		{ com.netgrif.application.engine.workflow.domain.Case useCase ->

			def childCaseIds = useCase.dataSet['childItemIds'].options?.keySet() as List
			if (childCaseIds == null || childCaseIds.isEmpty()) {
				return
			}

			removeChildItemFromParent(useCase.dataSet['parentId'].value, useCase)

			def childCases = workflowService.findAllById(childCaseIds)
			async.run {
				childCases.each {
					workflowService.deleteCase(it)
				}
			}
		}
	</function>
	<function scope="process" name="updateFilterAutocompleteOptions">
		{
			com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField filterAutocomplete,
			com.netgrif.application.engine.petrinet.domain.dataset.TaskField previewTaskRef,
			com.netgrif.application.engine.petrinet.domain.dataset.CaseField selectedFilterRef,
			com.netgrif.application.engine.petrinet.domain.dataset.ButtonField updateBtn,
			com.netgrif.application.engine.petrinet.domain.Transition trans,
			boolean taskTypeOnly
			->
			if (filterAutocomplete.getOptions().containsKey(filterAutocomplete.value)) {
				change previewTaskRef value {
					return [findTask({it.caseId.eq(filterAutocomplete.value).and(it.transitionId.eq("view_filter"))}).stringId]
				}
				make updateBtn,editable on trans when { true }
			} else {
				change filterAutocomplete options {
					def findAllPredicate
					if (taskTypeOnly) {
						findAllPredicate = { filterCase ->
							!selectedFilterRef.value.contains(filterCase.stringId) &amp;&amp;
							filterCase.dataSet["filter_type"].value == "Task"
						}
					} else {
						findAllPredicate = { filterCase -> !selectedFilterRef.value.contains(filterCase.stringId) }
					}
					return findFilters(filterAutocomplete.value != null ? filterAutocomplete.value : "")
							.findAll(findAllPredicate)
							.collectEntries({filterCase -&gt; [filterCase.stringId, filterCase.title]})
				}
				change previewTaskRef value { [] }
				make updateBtn,visible on trans when { true }
			}
		}
	</function>
	<function scope="process" name="updateOptionsBasedOnValue">
		{
			com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField toBeUpdated,
			com.netgrif.application.engine.petrinet.domain.dataset.MultichoiceMapField valueSelector,
			com.netgrif.application.engine.petrinet.domain.dataset.EnumerationMapField optionsHolder
			->
			def existingOptions = optionsHolder.options
			def selectedValues = valueSelector.value
			def newOptions = [:]

			if (selectedValues != null) {
				existingOptions.each { key, value ->
					if (selectedValues.contains(key)) {
						newOptions.put(key, value)
					}
				}
			}

			if (!newOptions.containsKey(toBeUpdated.value)) {
				change toBeUpdated value { null }
			}

			change toBeUpdated options { newOptions }
		}
	</function>

	<data type="text">
		<id>parentId</id>
		<title/>
	</data>
	<data type="text">
		<id>move_dest_uri</id>
		<title name="move_dest_uri">Destination URI</title>
	</data>
	<data type="i18n">
		<id>duplicate_new_title</id>
		<title name="duplicate_new_title">Title of duplicated view</title>
	</data>
	<data type="text">
		<id>duplicate_view_identifier</id>
		<title name="duplicate_view_identifier">View identifier</title>
		<desc name="duplicate_view_identifier_desc">Must be unique</desc>
	</data>
	<data type="enumeration_map">
		<id>childItemIds</id>
		<title/>
	</data>
	<data type="boolean" immediate="true">
		<id>hasChildren</id>
		<title/>
	</data>
	<data type="button">
		<id>duplicate_reset_childItemIds</id>
		<title/>
		<action trigger="set">
			hasChildren: f.hasChildren,
			childItemIds: f.childItemIds;

			change childItemIds options { [:] }
			change hasChildren value { false }
		</action>
	</data>
	<data type="text" immediate="true">
		<id>menu_item_identifier</id>
		<title>Identifier (Filter API)</title>
	</data>
	<data type="text" immediate="true">
		<id>nodePath</id>
		<title/>
		<event type="set">
			<id>0</id>
			<actions phase="post">
				<action>
					nodePath: f.nodePath,
					menu_item_identifier: f.menu_item_identifier;

					change menu_item_identifier value {
					def idx = nodePath.value.lastIndexOf(uriService.getUriSeparator())
					return nodePath.value.substring(idx + 1)
					}
				</action>
			</actions>
		</event>
	</data>

	<!-- GENERAL CONFIGURATION DATA -->
	<data type="text" immediate="true">
		<id>menu_icon</id>
		<title name="icon_identifier">Menu icon identifier</title>
		<desc name="icon_identifier_desc">Material icon identifier. List of icons with identifiers is available online.</desc>
		<action trigger="set">
			icon: f.this,
			iconPreview: f.menu_icon_preview;

			changeCaseProperty "icon" about { icon.value; }

			if (icon.value == "") {
				change iconPreview value {<![CDATA["""<span></span>"""]]>}
				return;
			}

			change iconPreview value {
				<![CDATA["""<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">"""]]> + icon.value + <![CDATA["""</span>"""]]>
			}
		</action>
	</data>
	<data type="text">
		<id>menu_icon_preview</id>
		<title name="icon_preview">Menu icon preview</title>
		<component>
			<name>htmltextarea</name>
		</component>
	</data>
	<data type="i18n" immediate="true">
		<id>menu_name</id>
		<title name="name">Name of the item</title>
		<desc name="name_desc">Will be shown in the menu</desc>
	</data>
	<data type="text" immediate="true">
		<id>tab_icon</id>
		<title>Tab icon identifier</title>
		<desc name="icon_identifier_desc">Material icon identifier. List of icons with identifiers is available online.</desc>
		<action trigger="set">
			icon: f.this,
			iconPreview: f.tab_icon_preview;

			if (icon.value == "") {
				change iconPreview value {<![CDATA["""<span></span>"""]]>}
				return;
			}

			change iconPreview value {
				<![CDATA["""<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">"""]]> + icon.value + <![CDATA["""</span>"""]]>
			}
		</action>
	</data>
	<data type="text">
		<id>tab_icon_preview</id>
		<title>Tab icon preview</title>
		<component>
			<name>htmltextarea</name>
		</component>
	</data>
	<data type="boolean" immediate="true">
		<id>use_tab_icon</id>
		<title name="display_icon">Display tab icon?</title>
		<init>true</init>
	</data>
	<data type="i18n" immediate="true">
		<id>tab_name</id>
		<title name="name">Name of the item</title>
		<desc name="name_desc">Will be shown in tab</desc>
	</data>
	<data type="button">
		<id>add_allowed_roles</id>
		<title/>
		<placeholder name="allow_roles">Allow view for roles</placeholder>
		<action trigger="set">
			allowedRoles: f.allowed_roles,
			processesAvailable: f.processes_available,
			rolesAvailable: f.roles_available;

			change allowedRoles options {return configurableMenuService.addSelectedRoles(allowedRoles, processesAvailable, rolesAvailable)}

			change rolesAvailable value {[]}
			change rolesAvailable options {[:]}
			change processesAvailable value {null}
		</action>
	</data>
	<data type="button">
		<id>remove_allowed_roles</id>
		<title/>
		<placeholder name="remove_from_allowed_roles">Remove from allowed roles</placeholder>
		<action trigger="set">
			allowedRoles: f.allowed_roles,
			processesAvailable: f.processes_available,
			rolesAvailable: f.roles_available;

			change allowedRoles options {return configurableMenuService.removeSelectedRoles(allowedRoles)}

			change allowedRoles value {[]}
			change rolesAvailable value {[]}
			change rolesAvailable options {[:]}
			change processesAvailable value {null}
		</action>
	</data>
	<data type="button">
		<id>add_banned_roles</id>
		<title/>
		<placeholder name="ban_roles">Ban view for roles</placeholder>
		<action trigger="set">
			bannedRoles: f.banned_roles,
			processesAvailable: f.processes_available,
			rolesAvailable: f.roles_available;

			change bannedRoles options {return configurableMenuService.addSelectedRoles(bannedRoles, processesAvailable, rolesAvailable)}

			change rolesAvailable value {[]}
			change rolesAvailable options {[:]}
			change processesAvailable value {null}
		</action>
	</data>
	<data type="button">
		<id>remove_banned_roles</id>
		<title/>
		<placeholder name="remove_from_banned_roles">Remove from banned roles</placeholder>
		<action trigger="set">
			bannedRoles: f.banned_roles,
			processesAvailable: f.processes_available,
			rolesAvailable: f.roles_available;

			change bannedRoles options {return configurableMenuService.removeSelectedRoles(bannedRoles)}

			change bannedRoles value {[]}
			change rolesAvailable value {[]}
			change rolesAvailable options {[:]}
			change processesAvailable value {null}
		</action>
	</data>
	<data type="enumeration_map" immediate="true">
		<id>processes_available</id>
		<title name="available_processes">Your processes</title>
		<desc name="available_processes_desc">Select a process containing roles you wish to add to allowed or banned roles lists.</desc>
		<action trigger="get">
			processes: f.this;

			change processes options {return configurableMenuService.getNetsByAuthorAsMapOptions(loggedUser(), org.springframework.context.i18n.LocaleContextHolder.locale)}
		</action>
		<action trigger="set">
			processes: f.this,
			allowedRoles: f.allowed_roles,
			bannedRoles: f.banned_roles,
			rolesAvailable: f.roles_available;

			change rolesAvailable options {return configurableMenuService.getAvailableRolesFromNet(processes, allowedRoles, bannedRoles)}
			change rolesAvailable value {[]}
		</action>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>roles_available</id>
		<title name="available_roles">Available roles from selected process</title>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>allowed_roles</id>
		<title name="roles_allowed">Allowed roles</title>
		<desc name="roles_allowed_desc">List of roles allowed to view this menu entry.</desc>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>banned_roles</id>
		<title name="roles_banned">Banned roles</title>
		<desc name="roles_banned_desc">List of roles not allowed to view this menu entry.</desc>
	</data>
	<data type="taskRef">
		<id>selected_filter_preview</id>
		<title/>
	</data>
	<data type="taskRef">
		<id>current_filter_preview</id>
		<title/>
	</data>
	<data type="i18n">
		<id>filter_header</id>
		<title/>
		<init>Current filter</init>
<!--		todo with translations, maybe get action-->
		<component>
			<name>divider</name>
		</component>
	</data>
	<data type="text">
		<id>new_filter_id</id>
		<title/>
	</data>
	<data type="enumeration_map">
		<id>filter_autocomplete_selection</id>
		<title name="filter_autocomplete_selection">Select new filter</title>
		<component>
			<name>autocomplete_dynamic</name>
		</component>
		<action trigger="set">
			trans: t.item_settings,
			filterAutocomplete: f.this,
			filter_case: f.filter_case,
			update_filter: f.update_filter,
			previewTaskRef: f.selected_filter_preview;

			updateFilterAutocompleteOptions(filterAutocomplete, previewTaskRef, filter_case, update_filter, trans, false)
		</action>
		<action trigger="get">
			trans: t.item_settings,
			filterAutocomplete: f.this,
			filter_case: f.filter_case,
			update_filter: f.update_filter,
			previewTaskRef: f.selected_filter_preview;

			updateFilterAutocompleteOptions(filterAutocomplete, previewTaskRef, filter_case, update_filter, trans, false)
		</action>
	</data>
	<data type="button">
		<id>update_filter</id>
		<title/>
		<placeholder name="update_filter">Update view with selected filter</placeholder>
		<component>
			<name>raised</name>
		</component>
		<action trigger="set">
			trans: t.item_settings,
			update_filter: f.update_filter,
			filter_case: f.filter_case,
			filterAutocomplete: f.filter_autocomplete_selection;

			change filter_case value { [filterAutocomplete.value] }
			change filterAutocomplete value { "" }
			make update_filter,visible on trans when { true }
		</action>
	</data>
	<data type="caseRef">
		<id>filter_case</id>
		<title/>
		<action trigger="set">
			additionalFilterCase: f.additional_filter_case,
			additionalAutocomplete: f.additional_filter_autocomplete_selection,
			additionalUpdate: f.update_additional_filter,
			additionalFilterPreview: f.selected_additional_filter_preview,
			mergeFilters: f.merge_filters,
			filterHeader: f.filter_header,
			currentAdditionalFilterPreview: f.current_additional_filter_preview,
			taskSettingsTrans: t.task_view_settings,
			settingsTrans: t.item_settings,
			caseViewHeader: f.case_view_header,
			caseViewSettingsTaskRef: f.case_view_settings_taskRef,
			taskViewHeader: f.task_view_header,
			taskViewSettingsTaskRef: f.task_view_settings_taskRef,
			filterTaskRef: f.current_filter_preview,
			filterCaseRef: f.filter_case;

			def filterCase = findCase({it._id.eq(filterCaseRef.value[0])})
			change filterTaskRef value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}

			if (filterCase.dataSet["filter_type"].value == "Case") {
				make caseViewHeader,editable on settingsTrans when { true }
				make caseViewSettingsTaskRef,editable on settingsTrans when { true }

				make additionalAutocomplete,editable on taskSettingsTrans when { true }
				make additionalUpdate,visible on taskSettingsTrans when { true }
				make additionalFilterPreview,visible on taskSettingsTrans when { true }
				make mergeFilters,visible on taskSettingsTrans when { true }
				make filterHeader,visible on taskSettingsTrans when { true }
				make currentAdditionalFilterPreview,visible on taskSettingsTrans when { true }
			} else {
				make caseViewHeader,hidden on settingsTrans when { true }
				make caseViewSettingsTaskRef,hidden on settingsTrans when { true }

				make additionalAutocomplete,hidden on taskSettingsTrans when { true }
				make additionalUpdate,hidden on taskSettingsTrans when { true }
				make additionalFilterPreview,hidden on taskSettingsTrans when { true }
				make mergeFilters,hidden on taskSettingsTrans when { true }
				make filterHeader,hidden on taskSettingsTrans when { true }
				make currentAdditionalFilterPreview,hidden on taskSettingsTrans when { true }
			}
			make taskViewHeader,editable on settingsTrans when { true }
			make taskViewSettingsTaskRef,editable on settingsTrans when { true }

			change additionalFilterCase value { [] }
		</action>
		<allowedNets>
			<allowedNet>filter</allowedNet>
		</allowedNets>
	</data>

	<!-- CASE VIEW CONFIGURATION DATA -->
	<data type="enumeration_map" immediate="true">
		<id>case_view_search_type</id>
		<title name="case_view_search_type">case Search type</title>
		<options>
			<option key="hidden">Hidden</option>
			<option key="fulltext">Fulltext</option>
			<option key="fulltext_advanced">Fulltext and advanced</option>
		</options>
		<init>fulltext_advanced</init>
	</data>
	<data type="text" immediate="true">
		<id>create_case_button_title</id>
		<title name="create_case_button_title">"New case" button title</title>
	</data>
	<data type="text">
		<id>create_case_button_icon_preview</id>
		<title name="create_case_button_icon_preview">Menu icon preview</title>
		<component>
			<name>htmltextarea</name>
		</component>
	</data>
	<data type="text" immediate="true">
		<id>create_case_button_icon</id>
		<title name="create_case_button_icon">"New case" button icon identifier</title>
		<action trigger="set">
			create_case_button_icon_preview: f.create_case_button_icon_preview,
			create_case_button_icon: f.create_case_button_icon;


			if (create_case_button_icon.value == "") {
			change create_case_button_icon_preview value {<![CDATA["""<span></span>"""]]>}
			return;
			}

			change create_case_button_icon_preview value {
			<![CDATA["""<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"><span class="material-icons">"""]]> + create_case_button_icon.value + <![CDATA["""</span>"""]]>
			}
		</action>
	</data>
	<data type="i18n">
		<id>case_view_header</id>
		<title/>
		<init>Case view settings</init>
		<!--		todo with translations, maybe get action-->
		<component>
			<name>divider</name>
		</component>
	</data>
	<data type="taskRef">
		<id>case_view_settings_taskRef</id>
		<title/>
		<init>case_view_settings</init>
	</data>
	<data type="boolean" immediate="true">
		<id>show_delete_menu</id>
		<title>Show delete menu for item?</title>
		<init>false</init>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>case_headers_mode</id>
		<title>Headers mode</title>
		<options>
			<option key="order">Order</option>
			<option key="search">Search</option>
			<option key="edit">Edit</option>
			<option key="table">Table</option>
		</options>
		<init>order</init>
		<action trigger="set">
			headersMode: f.case_headers_mode,
			defaultMode: f.case_headers_default_mode,
			holder: f.case_headers_options_holder;

			updateOptionsBasedOnValue(defaultMode, headersMode, holder)
		</action>
		<action trigger="get">
			headersMode: f.case_headers_mode,
			defaultMode: f.case_headers_default_mode,
			holder: f.case_headers_options_holder;

			updateOptionsBasedOnValue(defaultMode, headersMode, holder)
		</action>
	</data>
	<data type="enumeration_map" immediate="true">
		<id>case_headers_default_mode</id>
		<title>Default headers mode</title>
		<options>
			<option key="order">Order</option>
		</options>
		<init>order</init>
	</data>
	<data type="enumeration_map">
		<id>case_headers_options_holder</id>
		<title/>
		<options>
			<option key="order">Order</option>
			<option key="search">Search</option>
			<option key="edit">Edit</option>
			<option key="table">Table</option>
		</options>
	</data>
	<data type="boolean" immediate="true">
		<id>case_is_header_mode_changeable</id>
		<title>Can be header mode changed?</title>
		<init>true</init>
	</data>

	<!-- TASK VIEW CONFIGURATION DATA -->
	<data type="taskRef">
		<id>selected_additional_filter_preview</id>
		<title/>
	</data>
	<data type="taskRef">
		<id>current_additional_filter_preview</id>
		<title/>
	</data>
	<data type="enumeration_map">
		<id>additional_filter_autocomplete_selection</id>
		<title name="filter_autocomplete_selection">Select new filter</title>
		<component>
			<name>autocomplete_dynamic</name>
		</component>
		<action trigger="set">
			trans: t.task_view_settings,
			filterAutocomplete: f.this,
			filterCase: f.additional_filter_case,
			updateFilter: f.update_additional_filter,
			previewTaskRef: f.selected_additional_filter_preview;

			updateFilterAutocompleteOptions(filterAutocomplete, previewTaskRef, filterCase, updateFilter, trans, true)
		</action>
		<action trigger="get">
			trans: t.task_view_settings,
			filterAutocomplete: f.this,
			filterCase: f.additional_filter_case,
			updateFilter: f.update_additional_filter,
			previewTaskRef: f.selected_additional_filter_preview;

			updateFilterAutocompleteOptions(filterAutocomplete, previewTaskRef, filterCase, updateFilter, trans, true)
		</action>
	</data>
	<data type="button">
		<id>update_additional_filter</id>
		<title/>
		<placeholder name="update_filter">Update view with selected filter</placeholder>
		<component>
			<name>raised</name>
		</component>
		<action trigger="set">
			trans: t.task_view_settings,
			updateFilter: f.update_additional_filter,
			filterCase: f.additional_filter_case,
			filterAutocomplete: f.additional_filter_autocomplete_selection;

			change filterCase value { [filterAutocomplete.value] }
			change filterAutocomplete value { "" }
			make updateFilter,visible on trans when { true }
		</action>
	</data>
	<data type="caseRef">
		<id>additional_filter_case</id>
		<title/>
		<action trigger="set">
			taskViewTrans: t.task_view_settings,
			mergeFilters: f.merge_filters,
			filterTaskRef: f.current_additional_filter_preview,
			filterCaseRef: f.additional_filter_case;

			if (filterCaseRef.value[0] == null) {
				make mergeFilters,visible on taskViewTrans when { true }
				return
			}

			def filterCase = findCase({it._id.eq(filterCaseRef.value[0])})
			change filterTaskRef value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}
			make mergeFilters,editable on taskViewTrans when { true }
		</action>
		<allowedNets>
			<allowedNet>filter</allowedNet>
		</allowedNets>
	</data>
	<data type="boolean" immediate="true">
		<id>merge_filters</id>
		<title>Merge with base filter?</title>
		<init>true</init>
	</data>
	<data type="taskRef">
		<id>task_view_settings_taskRef</id>
		<title/>
		<init>task_view_settings</init>
	</data>
	<data type="i18n">
		<id>task_view_header</id>
		<title/>
		<init>Task view settings</init>
		<!--		todo with translations, maybe get action-->
		<component>
			<name>divider</name>
		</component>
	</data>
	<data type="enumeration_map" immediate="true">
		<id>task_view_search_type</id>
		<title name="task_view_search_type">task Search type</title>
		<options>
			<option key="hidden">Hidden</option>
			<option key="fulltext">Fulltext</option>
			<option key="fulltext_advanced">Fulltext and advanced</option>
		</options>
		<init>fulltext_advanced</init>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>task_headers_mode</id>
		<title>Headers mode</title>
		<options>
			<option key="order">Order</option>
			<option key="edit">Edit</option>
		</options>
		<init>order</init>
		<action trigger="set">
			headersMode: f.task_headers_mode,
			defaultMode: f.task_headers_default_mode,
			holder: f.task_headers_options_holder;

			updateOptionsBasedOnValue(defaultMode, headersMode, holder)
		</action>
		<action trigger="get">
			headersMode: f.case_headers_mode,
			defaultMode: f.case_headers_default_mode,
			holder: f.case_headers_options_holder;

			updateOptionsBasedOnValue(defaultMode, headersMode, holder)
		</action>
	</data>
	<data type="enumeration_map" immediate="true">
		<id>task_headers_default_mode</id>
		<title>Default headers mode</title>
		<options>
			<option key="order">Order</option>
		</options>
		<init>order</init>
	</data>
	<data type="enumeration_map">
		<id>task_headers_options_holder</id>
		<title/>
		<options>
			<option key="order">Order</option>
			<option key="edit">Edit</option>
		</options>
	</data>
	<data type="boolean" immediate="true">
		<id>task_is_header_mode_changeable</id>
		<title>Can be header mode changed?</title>
		<init>true</init>
	</data>

	<data type="text" immediate="true">
		<id>default_headers</id>
		<title name="default_headers">Set default headers</title>
	</data>

	<!-- I18NS -->
	<i18n locale="sk">
		<i18nString name="display_icon">Zobrazovať ikonu?</i18nString>
		<i18nString name="icon_preview">Náhľad ikony</i18nString>
		<i18nString name="icon_identifier">Identifikátor ikony</i18nString>
		<i18nString name="icon_identifier_desc">Identifikátor Material ikony. Zoznam ikon s identifikátormi je dostupný online.</i18nString>
		<i18nString name="allow_roles">Pridaj k povoleným roliam</i18nString>
		<i18nString name="remove_from_allowed_roles">Odstráň z povolených rolí</i18nString>
		<i18nString name="ban_roles">Pridaj k zakázaným roliam</i18nString>
		<i18nString name="remove_from_banned_roles">Odstráň zo zakázaných rolí</i18nString>
		<i18nString name="processes_available">Vaše procesy</i18nString>
		<i18nString name="available_processes_desc">Vyberte proces obsahujúci roly ktoré chcete pridať do zoznamu povolených alebo zakázaných rolí.</i18nString>
		<i18nString name="roles_available">Dostupné roly</i18nString>
		<i18nString name="allowed_roles">Povolené roly</i18nString>
		<i18nString name="banned_roles">Zakázané roly</i18nString>
		<i18nString name="create_case_button_title">Názov tlačidla "Nová inštancia"</i18nString>
		<i18nString name="create_case_button_icon">Identifikátor ikony tlačidla "Nová inštancia"</i18nString>
		<i18nString name="create_case_button_icon_preview">Náhľad ikony</i18nString>
		<i18nString name="default_headers">Predvolené hlavičky</i18nString>
		<i18nString name="filter_autocomplete_selection">Zvoľte nový filter</i18nString>
	</i18n>
	<i18n locale="de">
		<i18nString name="display_icon">Menüikone anzeigen</i18nString>
		<i18nString name="icon_preview">Ikonevorschau</i18nString>
		<i18nString name="icon_identifier">Ikone ID</i18nString>
		<i18nString name="icon_identifier_desc">Material Ikone ID. Liste den Ikonen mit IDs ist online verfügbar.</i18nString>
		<i18nString name="allow_roles">Zu zulässigen Rollen hinzufügen</i18nString>
		<i18nString name="remove_from_allowed_roles">Aus zulässigen Rollen entfernen</i18nString>
		<i18nString name="ban_roles">Zu verbotenen Rollen hinzufügen</i18nString>
		<i18nString name="remove_from_banned_roles">Aus verbotenen Rollen entfernen</i18nString>
		<i18nString name="processes_available">Ihre Prozesse</i18nString>
		<i18nString name="available_processes_desc">Wählen Sie einen Prozess mit Rollen aus, die Sie zu Listen mit zulässigen oder verbotenen Rollen hinzufügen möchten.</i18nString>
		<i18nString name="roles_available">Verfügbare Rollen</i18nString>
		<i18nString name="allowed_roles">Zulässige Rollen</i18nString>
		<i18nString name="banned_roles">Verbotene Rollen</i18nString>
		<i18nString name="create_case_button_title">Schaltflächentitel "Neuer Fall"</i18nString>
		<i18nString name="create_case_button_icon">Ikone ID</i18nString>
		<i18nString name="create_case_button_icon_preview">Ikonevorschau</i18nString>
		<i18nString name="default_headers">Anzuzeigende Attributmenge auswählen</i18nString>
		<i18nString name="filter_autocomplete_selection">Neue Filter auswählen</i18nString>
	</i18n>

	<!-- TRANSITIONS -->
	<transition>
		<id>initialize</id>
		<x>340</x>
		<y>220</y>
		<label>initialize [await sync]</label>
		<icon>hourglass_empty</icon>
		<dataGroup>
			<id>view</id>
			<dataRef>
				<id>filter_case</id>
				<logic>
					<behavior>forbidden</behavior>
					<action trigger="set">
						filterCaseRef: f.filter_case,
						tab_name: f.tab_name,
						menu_name: f.menu_name;

						def filterCase = findCase({it._id.eq(filterCaseRef.value[0])})
						change tab_name value {return filterCase.dataSet["i18n_filter_name"].value}
						change menu_name value {return filterCase.dataSet["i18n_filter_name"].value}
					</action>
				</logic>
			</dataRef>
		</dataGroup>
	</transition>

	<transition>
		<id>item_settings</id>
		<x>460</x>
		<y>100</y>
		<label name="item_settings">Item settings</label>
		<icon>settings</icon>
		<dataGroup>
			<id>general_0</id>
			<cols>5</cols>
			<layout>grid</layout>
			<dataRef>
				<id>menu_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>menu_icon</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>menu_icon_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>tab_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>use_tab_icon</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
				<event type="set">
					<id>0</id>
					<actions phase="post">
						<action>
							trans: t.this,
							iconPreview: f.tab_icon_preview,
							icon: f.tab_icon,
							useIcon: f.use_tab_icon;

							make iconPreview,visible on trans when { useIcon.value }
							make icon,editable on trans when { useIcon.value }

							make iconPreview,hidden on trans when { !useIcon.value }
							make icon,hidden on trans when { !useIcon.value }
						</action>
					</actions>
				</event>
			</dataRef>
			<dataRef>
				<id>tab_icon</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>tab_icon_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>item_settings_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>default_headers</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>filter_update</id>
			<cols>4</cols>
			<layout>grid</layout>
			<title name="filter_update_title">Filter section</title>
			<dataRef>
				<id>filter_autocomplete_selection</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>update_filter</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>selected_filter_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>current_filter</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>filter_header</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>current_filter_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>roles_management</id>
			<cols>5</cols>
			<layout>grid</layout>
			<title name="roles_management_title">Roles section</title>
			<dataRef>
				<id>processes_available</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>2</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>roles_available</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>2</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>add_allowed_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
			<dataRef>
				<id>allowed_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>remove_allowed_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
			<dataRef>
				<id>add_banned_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
			<dataRef>
				<id>banned_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>remove_banned_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>case_view_settings_dataGroup</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>case_view_header</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>case_view_settings_taskRef</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>task_view_settings_dataGroup</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>task_view_header</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task_view_settings_taskRef</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>

	<transition>
		<id>move_item</id>
		<x>580</x>
		<y>140</y>
		<label name="move_item">Move item</label>
		<icon>move_down</icon>
		<dataGroup>
			<id>move</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>move_dest_uri</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>finish</id>
			<actions phase="pre">
				<action>
					dest: f.move_dest_uri;

					if (dest.value == "") {
						throw new IllegalArgumentException("URI must not be empty!")
					}

					changeMenuItem useCase uri { dest.value }
				</action>
			</actions>
			<title name="move_item_finish">Move</title>
		</event>
	</transition>

	<transition>
		<id>duplicate_item</id>
		<x>580</x>
		<y>300</y>
		<label name="duplicate_item">Duplicate item</label>
		<icon>content_copy</icon>
		<dataGroup>
			<id>duplicate</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>duplicate_new_title</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>duplicate_view_identifier</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>finish</id>
			<actions phase="pre">
				<action>
					identifier: f.duplicate_view_identifier,
					title: f.duplicate_new_title;

					duplicateMenuItem(useCase, title.value, identifier.value)
				</action>
			</actions>
			<title name="duplicate_item_finish">Duplicate</title>
		</event>
	</transition>

	<transition>
		<id>change_filter</id>
		<x>460</x>
		<y>340</y>
		<label>[Change filter]</label>
		<roleRef>
			<id>system</id>
			<logic>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataRef>
			<id>new_filter_id</id>
			<logic>
				<behavior>editable</behavior>
				<behavior>required</behavior>
			</logic>
			<event type="set">
				<id>set_event_0</id>
				<actions phase="post">
					<action>
						new_filter_id: f.new_filter_id,
						filterTaskRef: f.current_filter_preview,
						filterCaseRef: f.filter_case;

						change filterCaseRef value { [new_filter_id.value] }
						def filterCase = findCase({it._id.eq(filterCaseRef.value[0])})
						change filterTaskRef value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}
					</action>
				</actions>
			</event>
		</dataRef>
	</transition>

	<transition>
		<id>case_view_settings</id>
		<x>340</x>
		<y>100</y>
		<label>Case view settings</label>
		<dataGroup>
			<id>case_view_dataGroup</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>case_view_search_type</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>show_delete_menu</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>create_case_button_title</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>create_case_button_icon</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>create_case_button_icon_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>case_view_headers</id>
			<cols>5</cols>
			<layout>grid</layout>
			<dataRef>
				<id>case_is_header_mode_changeable</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
					<action trigger="set">
						trans: t.this,
						isChangeable: f.case_is_header_mode_changeable,
						mode: f.case_headers_mode,
						defaultMode: f.case_headers_default_mode;

						make mode,editable on trans when { isChangeable.value }
						make mode,required on trans when { isChangeable.value }
						make defaultMode,editable on trans when { isChangeable.value }
						make defaultMode,required on trans when { isChangeable.value }

						make mode,hidden on trans when { !isChangeable.value }
						make mode,optional on trans when { !isChangeable.value }
						make defaultMode,hidden on trans when { !isChangeable.value }
						make defaultMode,optional on trans when { !isChangeable.value }
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>case_headers_mode</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>case_headers_default_mode</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>

	<transition>
		<id>task_view_settings</id>
		<x>340</x>
		<y>340</y>
		<label>Task view settings</label>
		<dataGroup>
			<id>task_view_dataGroup</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>task_view_search_type</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>task_view_headers</id>
			<cols>5</cols>
			<layout>grid</layout>
			<dataRef>
				<id>task_is_header_mode_changeable</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
					<action trigger="set">
						trans: t.this,
						isChangeable: f.task_is_header_mode_changeable,
						mode: f.task_headers_mode,
						defaultMode: f.task_headers_default_mode;

						make mode,editable on trans when { isChangeable.value }
						make mode,required on trans when { isChangeable.value }
						make defaultMode,editable on trans when { isChangeable.value }
						make defaultMode,required on trans when { isChangeable.value }

						make mode,hidden on trans when { !isChangeable.value }
						make mode,optional on trans when { !isChangeable.value }
						make defaultMode,hidden on trans when { !isChangeable.value }
						make defaultMode,optional on trans when { !isChangeable.value }
					</action>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task_headers_mode</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>task_headers_default_mode</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>additional_filter_update</id>
			<cols>4</cols>
			<layout>grid</layout>
			<title>Filter section</title>
			<dataRef>
				<id>additional_filter_autocomplete_selection</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>update_additional_filter</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>selected_additional_filter_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>current_additional_filter</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>filter_header</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>current_additional_filter_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>merge_filters</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<template>material</template>
					<appearance>standard</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>

	<!-- PLACES-->
	<place>
		<id>uninitialized</id>
		<x>220</x>
		<y>220</y>
		<label>uninitialized</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>initialized</id>
		<x>460</x>
		<y>220</y>
		<label>initialized</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>

	<!-- ARCS-->
	<arc>
		<id>a1</id>
		<type>regular</type>
		<sourceId>uninitialized</sourceId>
		<destinationId>initialize</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a7</id>
		<type>read</type>
		<sourceId>initialized</sourceId>
		<destinationId>item_settings</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a8</id>
		<type>regular</type>
		<sourceId>initialize</sourceId>
		<destinationId>initialized</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a9</id>
		<type>read</type>
		<sourceId>initialized</sourceId>
		<destinationId>move_item</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a10</id>
		<type>read</type>
		<sourceId>initialized</sourceId>
		<destinationId>duplicate_item</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a12</id>
		<type>read</type>
		<sourceId>initialized</sourceId>
		<destinationId>change_filter</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>